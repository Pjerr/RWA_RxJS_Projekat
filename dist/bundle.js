/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";const t=document.querySelector("canvas"),e=t.getContext("2d"),n=(e.canvas.width,t.width/2+30),r=t.width/2-30;var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function s(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function a(t,e){for(var n=0,r=e.length,i=t.length;n<r;n++,i++)t[i]=e[n];return t}function l(t){return this instanceof l?(this.v=t,this):new l(t)}function h(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof l?Promise.resolve(n.value.v).then(c,a):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function c(t){s("next",t)}function a(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function f(t){return"function"==typeof t}Object.create,Object.create;var d,p=((d=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),d.prototype.constructor=d,d);function y(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var u=s(o),l=u.next();!l.done;l=u.next())l.value.remove(this)}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}else o.remove(this);var h=this.initialTeardown;if(f(h))try{h()}catch(t){i=t instanceof p?t.errors:[t]}var d=this._teardowns;if(d){this._teardowns=null;try{for(var y=s(d),v=y.next();!v.done;v=y.next()){var b=v.value;try{w(b)}catch(t){i=null!=i?i:[],t instanceof p?i=a(a([],c(i)),c(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{v&&!v.done&&(r=y.return)&&r.call(y)}finally{if(n)throw n.error}}}if(i)throw new p(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)w(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&y(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&y(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function b(t){return t instanceof v||t&&"closed"in t&&f(t.remove)&&f(t.add)&&f(t.unsubscribe)}function w(t){f(t)?t():t.unsubscribe()}v.EMPTY;var m=function(t){function e(e,n){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(v),g={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=g.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,a([],c(t)))},clearInterval:function(t){var e=g.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},x=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),g.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;g.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,y(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(m),_={now:function(){return(_.delegate||Date).now()},delegate:void 0},P=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=_.now,t}(),S=function(t){function e(e,n){void 0===n&&(n=P.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(P),A=new S(x),E=A,I=null,T=null,k=void 0,B=!1,O=!1,Y={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Y.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,a([],c(t)))},clearTimeout:function(t){var e=Y.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function j(t){Y.setTimeout((function(){if(!I)throw t;I(t)}))}function M(){}var F=R("C",void 0,void 0);function R(t,e,n){return{kind:t,value:e,error:n}}var q=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,b(e)&&e.add(n)):n.destination=D,n}return o(e,t),e.create=function(t,e,n){return new C(t,e,n)},e.prototype.next=function(t){this.isStopped?X(function(t){return R("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?X(R("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?X(F,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(v),C=function(t){function e(e,n,r){var i,o=t.call(this)||this;if(f(e))i=e;else if(e){var u;i=e.next,n=e.error,r=e.complete,o&&O?(u=Object.create(e)).unsubscribe=function(){return o.unsubscribe()}:u=e,i=null==i?void 0:i.bind(u),n=null==n?void 0:n.bind(u),r=null==r?void 0:r.bind(u)}return o.destination={next:i?H(i,o):M,error:H(null!=n?n:L,o),complete:r?H(r,o):M},o}return o(e,t),e}(q);function H(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,a([],c(n)))}catch(t){if(B){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else j(t)}}}function L(t){throw t}function X(t,e){var n=T;n&&Y.setTimeout((function(){return n(t,e)}))}var D={closed:!0,next:M,error:L,complete:M},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function G(t){return t}function z(t){return 0===t.length?G:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var U=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=(r=t)&&r instanceof q||function(t){return t&&f(t.next)&&f(t.error)&&f(t.complete)}(r)&&b(r)?t:new C(t,e,n);if(B)this._deprecatedSyncErrorSubscribe(i);else{var o=this.operator,u=this.source;i.add(o?o.call(i,u):u?this._subscribe(i):this._trySubscribe(i))}return i},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=J(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==i||i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?z(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=J(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function J(t){var e;return null!==(e=null!=t?t:k)&&void 0!==e?e:Promise}function K(t){return t&&f(t.schedule)}var Q={schedule:function(t){var e=requestAnimationFrame,n=cancelAnimationFrame,r=Q.delegate;r&&(e=r.requestAnimationFrame,n=r.cancelAnimationFrame);var i=e((function(e){n=void 0,t(e)}));return new v((function(){return null==n?void 0:n(i)}))},requestAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Q.delegate;return((null==n?void 0:n.requestAnimationFrame)||requestAnimationFrame).apply(void 0,a([],c(t)))},cancelAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Q.delegate;return((null==n?void 0:n.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,a([],c(t)))},delegate:void 0},V=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e._scheduled||(e._scheduled=Q.requestAnimationFrame((function(){return e.flush(void 0)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(Q.cancelAnimationFrame(n),e._scheduled=void 0)},e}(x),W=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this._active=!0,this._scheduled=void 0;var e,n=this.actions,r=-1;t=t||n.shift();var i=n.length;do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this._active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(S))(V);function Z(t){return function(e){if(function(t){return f(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var $=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.onFinalize=o,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return o(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(q);function tt(t,e){return Z((function(n,r){var i=0;n.subscribe(new $(r,(function(n){r.next(t.call(e,n,i++))})))}))}var et=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function nt(t){return f(null==t?void 0:t.then)}function rt(t,e){return new U((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var it="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function ot(t,e){if(!t)throw new Error("Iterable cannot be null");return new U((function(n){var r=new v;return r.add(e.schedule((function(){var i=t[Symbol.asyncIterator]();r.add(e.schedule((function(){var t=this;i.next().then((function(e){e.done?n.complete():(n.next(e.value),t.schedule())}))})))}))),r}))}function ut(t){return f(t[N])}function st(t){return f(null==t?void 0:t[it])}function ct(t){return Symbol.asyncIterator&&f(null==t?void 0:t[Symbol.asyncIterator])}function at(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function lt(t){return h(this,arguments,(function(){var e,n,r;return u(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,l(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,l(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,l(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ht(t){return f(null==t?void 0:t.getReader)}function ft(t,e){return e?function(t,e){if(null!=t){if(ut(t))return function(t,e){return new U((function(n){var r=new v;return r.add(e.schedule((function(){var i=t[N]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(et(t))return rt(t,e);if(nt(t))return function(t,e){return new U((function(n){return e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){n.next(t),n.add(e.schedule((function(){return n.complete()})))})))}),(function(t){n.add(e.schedule((function(){return n.error(t)})))}))}))}))}(t,e);if(ct(t))return ot(t,e);if(st(t))return function(t,e){return new U((function(n){var r;return n.add(e.schedule((function(){r=t[it](),function(t,e,n,r){void 0===r&&(r=0);var i=e.schedule((function(){try{n.call(this)}catch(e){t.error(e)}}),r);t.add(i)}(n,e,(function(){var t=r.next(),e=t.value;t.done?n.complete():(n.next(e),this.schedule())}))}))),function(){return f(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ht(t))return function(t,e){return ot(lt(t),e)}(t,e)}throw at(t)}(t,e):dt(t)}function dt(t){if(t instanceof U)return t;if(null!=t){if(ut(t))return r=t,new U((function(t){var e=r[N]();if(f(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(et(t))return pt(t);if(nt(t))return n=t,new U((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,j)}));if(ct(t))return yt(t);if(st(t))return e=t,new U((function(t){var n,r;try{for(var i=s(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(ht(t))return yt(lt(t))}var e,n,r;throw at(t)}function pt(t){return new U((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function yt(t){return new U((function(e){(function(t,e){var n,r,i,o,c,a,l,h;return c=this,a=void 0,h=function(){var c,a;return u(this,(function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=s(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),u.label=1;case 1:return[4,n.next()];case 2:if((r=u.sent()).done)return[3,4];if(c=r.value,e.next(c),e.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=u.sent(),i={error:a},[3,11];case 6:return u.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(h.next(t))}catch(t){e(t)}}function r(t){try{i(h.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((h=h.apply(c,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function vt(t,e,n){return void 0===n&&(n=1/0),f(e)?vt((function(n,r){return tt((function(t,i){return e(n,t,r,i)}))(dt(t(n,r)))}),n):("number"==typeof e&&(n=e),Z((function(e,r){return function(t,e,n,r,i,o,u,s){var c=[],a=0,l=0,h=!1,f=function(){!h||c.length||a||e.complete()},d=function(t){return a<r?p(t):c.push(t)},p=function(t){a++;var i=!1;dt(n(t,l++)).subscribe(new $(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),p(t);f()}catch(t){e.error(t)}var t})))};return t.subscribe(new $(e,d,(function(){h=!0,f()}))),function(){}}(e,r,t,n)})))}var bt=Array.isArray;function wt(t){return tt((function(e){return function(t,e){return bt(e)?t.apply(void 0,a([],c(e))):t(e)}(t,e)}))}function mt(t,e){return e?rt(t,e):pt(t)}var gt=["addListener","removeListener"],xt=["addEventListener","removeEventListener"],_t=["on","off"];function Pt(t,e,n,r){if(f(n)&&(r=n,n=void 0),r)return Pt(t,e,n).pipe(wt(r));var i=c(function(t){return f(t.addEventListener)&&f(t.removeEventListener)}(t)?xt.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return f(t.addListener)&&f(t.removeListener)}(t)?gt.map(St(t,e)):function(t){return f(t.on)&&f(t.off)}(t)?_t.map(St(t,e)):[],2),o=i[0],u=i[1];if(!o&&et(t))return vt((function(t){return Pt(t,e,n)}))(mt(t));if(!o)throw new TypeError("Invalid event target");return new U((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return o(e),function(){return u(e)}}))}function St(t,e){return function(n){return function(r){return t[n](e,r)}}}var At=Array.isArray,Et=Object.getPrototypeOf,It=Object.prototype,Tt=Object.keys;function kt(t){if(1===t.length){var e=t[0];if(At(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Et(r)===It){var n=Tt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function Bt(t){return t[t.length-1]}function Ot(t){return f(Bt(t))?t.pop():void 0}function Yt(t){return K(Bt(t))?t.pop():void 0}function jt(t,e){return"number"==typeof Bt(t)?t.pop():e}function Mt(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function Ft(t,e,n){return void 0===n&&(n=G),function(r){Rt(e,(function(){for(var i=t.length,o=new Array(i),u=i,s=i,c=function(i){Rt(e,(function(){var c=ft(t[i],e),a=!1;c.subscribe(new $(r,(function(t){o[i]=t,a||(a=!0,s--),s||r.next(n(o.slice()))}),(function(){--u||r.complete()})))}),r)},a=0;a<i;a++)c(a)}),r)}}function Rt(t,e,n){t?n.add(t.schedule(e)):e()}function qt(t,e,n,r,i){return function(o,u){var s=n,c=e,a=0;o.subscribe(new $(u,(function(e){var n=a++;c=s?t(c,e,n):(s=!0,e),r&&u.next(c)}),i&&function(){s&&u.next(c),u.complete()}))}}function Ct(t,e){return Z(qt(t,e,arguments.length>=2,!0))}function Ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ot(t);return Z((function(e,r){for(var i=t.length,o=new Array(i),u=t.map((function(){return!1})),s=!1,l=function(e){dt(t[e]).subscribe(new $(r,(function(t){o[e]=t,s||u[e]||(u[e]=!0,(s=u.every(G))&&(u=null))}),M))},h=0;h<i;h++)l(h);e.subscribe(new $(r,(function(t){if(s){var e=a([t],c(o));r.next(n?n.apply(void 0,a([],c(e))):e)}})))}))}function Lt(t,e){return void 0===e&&(e=G),t=null!=t?t:Xt,Z((function(n,r){var i,o=!0;n.subscribe(new $(r,(function(n){var u=e(n);!o&&t(i,u)||(o=!1,i=u,r.next(n))})))}))}function Xt(t,e){return t===e}function Dt(t){return void 0===t&&(t=1/0),vt(G,t)}var Nt=new U((function(t){return t.complete()}));function Gt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Yt(t),r=jt(t,1/0),i=t;return i.length?1===i.length?dt(i[0]):Dt(r)(mt(i,n)):Nt}class zt{constructor(){}playerHitSound(){let t=document.createElement("audio");t.src="../assets/paddle_hit.wav",t.style.display="none",t.play()}terrainHitSound(){let t=document.createElement("audio");t.src="../assets/terrain_hit.wav",t.style.display="none",t.play()}scoreSound(){let t=document.createElement("audio");t.src="../assets/score.wav",t.style.display="none",t.play()}}class Ut{constructor(t,e,n,r,i){this.width=t,this.height=e,this.speed=n,this.position=r,this.score=i}getScore(){return this.score}scored(){this.score++}getPositionY(){return this.position.y}setPositionY(t){this.position.y=t}drawPlayer(){e.beginPath(),e.rect(this.position.x,this.position.y,this.width,this.height),e.fill(),e.closePath()}drawScorePlayer(t,n){e.font="24px Arial",e.fillText(this.score.toString(),t,n)}hitPlayer(t,n){return 1==n&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()>e.canvas.width-2*this.width?(console.log("Hit player1"),(new zt).playerHitSound(),!0):2==n&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()<2*this.width&&(console.log("hit player 2"),(new zt).playerHitSound(),!0)}movePlayer(t,n,r){let i=t+r*n.deltaTime*this.speed;return Math.max(Math.min(i,e.canvas.height-this.height),0)}}e.fillStyle="white";let Jt={player1:!1,player2:!1,floor:!1,ceiling:!1,wall:!1},Kt={x:2*Math.random()*(Math.random()<.5?1:-1),y:2*Math.random()*(Math.random()<.5?1:-1)},Qt={x:t.width/2,y:t.height/2},Vt={x:t.width-40,y:t.height/2},Wt={x:20,y:t.height/2},Zt=new class{constructor(t,e,n,r){this.ballSpeed=t,this.ballRadius=e,this.position=n,this.direction=r}getBallSpeed(){return this.ballSpeed}getBallRadius(){return this.ballRadius}getBallPositionX(){return this.position.x}getBallPositionY(){return this.position.y}setBallPositionX(t){this.position.x=t}setBallPositionY(t){this.position.y=t}resetPosition(){this.position.x=t.width/2,this.position.y=t.height/2}setBallDirectionRandom(){this.direction.x=2*Math.random()*(Math.random()<.5?1:-1),this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}setBallDirectionRandomY(){this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}bounceX(){this.direction.x=-this.direction.x}bounceY(){this.direction.y=-this.direction.y}drawBall(){e.beginPath(),e.arc(this.position.x,this.position.y,this.ballRadius,0,2*Math.PI),e.fill(),e.closePath()}moveBall(t){this.position.x+=this.direction.x*t.deltaTime*this.ballSpeed,this.position.y+=this.direction.y*t.deltaTime*this.ballSpeed}}(150,8,Qt,Kt),$t=new Ut(20,70,350,Vt,0),te=new Ut(20,70,350,Wt,0);const ee={ball:Zt,collisions:Jt,player1:$t,player2:te},ne=(re=17,ie=W,void 0===re&&(re=0),void 0===ie&&(ie=A),re<0&&(re=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=E);var r=-1;return null!=e&&(K(e)?n=e:r=e),new U((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var u=0;return n.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(re,re,ie)).pipe(tt((()=>({time:Date.now(),deltaTime:null}))),Ct(((t,e)=>({time:e.time,deltaTime:(e.time-t.time)/1e3}))));var re,ie;const oe=Gt(Pt(document,"keydown",(t=>{switch(t.keyCode){case 38:return-1;case 40:return 1;default:return 0}})),Pt(document,"keyup",(()=>0))),ue=ne.pipe(Ht(oe),Ct(((t,[e,n])=>$t.movePlayer(t,e,n)),t.width/2),Lt()),se=Gt(Pt(document,"keydown",(t=>{switch(t.keyCode){case 87:return-1;case 83:return 1;default:return 0}})),Pt(document,"keyup",(()=>0))),ce=ne.pipe(Ht(se),Ct(((t,[e,n])=>te.movePlayer(t,e,n)),t.height/2),Lt());let ae=new class{constructor(t,e,n,r){this.player1=t,this.player2=e,this.ball=n,this.collisions=r}drawTitle(){e.textAlign="center",e.font="bold 60px Courier New",e.fillText("P O N G",t.width/2,t.height/2-60)}drawContorls(){e.textAlign="center",e.font="bold 30px Courier New",e.fillText("Press any button to start",t.width/2,t.height/2)}drawGameOver(n){e.clearRect(t.width/2,t.height/2,t.width/2,t.height/2),e.textAlign="center",e.font="20px Arial",e.fillText(n,t.width/2,t.height/2)}updatePlayer1(t){this.player1.setPositionY(t),this.player1.drawPlayer()}updatePlayer2(t){this.player2.setPositionY(t),this.player2.drawPlayer()}updateScorePlayer1(){this.player1.drawScorePlayer(n,20)}updateScorePlayer2(){this.player2.drawScorePlayer(r,20)}calculateObjects(e){return this.ball.moveBall(e),this.collisions.player1=this.player1.hitPlayer(this.ball,1),this.collisions.player2=this.player2.hitPlayer(this.ball,2),(this.collisions.player1||this.collisions.player2)&&(this.ball.bounceX(),this.ball.setBallDirectionRandomY()),this.ball.getBallPositionX()>t.width&&(this.player2.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.ball.getBallPositionX()<0&&(this.player1.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.collisions.wall&&((new zt).scoreSound(),this.collisions.wall=!1),this.collisions.ceiling=this.ball.getBallPositionY()<this.ball.getBallRadius(),this.collisions.floor=this.ball.getBallPositionY()>t.height-this.ball.getBallRadius(),(this.collisions.ceiling||this.collisions.floor)&&((new zt).terrainHitSound(),this.ball.bounceY()),{ball:this.ball,collisions:this.collisions,player1:this.player1,player2:this.player2}}}($t,te,Zt,Jt);ae.drawTitle(),ae.drawContorls();const le=ne.pipe(Ht(ue,ce),Ct((({},[t])=>ae.calculateObjects(t)),ee)),he=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Yt(t),r=Ot(t),i=kt(t),o=i.args,u=i.keys;if(0===o.length)return ft([],n);var s=new U(Ft(o,n,u?function(t){return Mt(u,t)}:G));return r?s.pipe(wt(r)):s}([ne,ue,le,ce]).subscribe((function([n,r,i,o]){e.clearRect(0,0,t.width,t.height),ae.updatePlayer1(r),ae.updatePlayer2(o),ae.updateScorePlayer1(),ae.updateScorePlayer2(),i.ball.drawBall(),i.player1.getScore()>5&&(ae.drawGameOver("Player 1 wins!"),he.unsubscribe()),i.player2.getScore()>5&&(ae.drawGameOver("Player 2 wins!"),he.unsubscribe())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vc3JjL2NvbnN0YW50cy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvaW50ZXJ2YWxQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lQWN0aW9uLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY2F1Z2h0U2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21BcnJheS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzQXJnQXJyYXlPck9iamVjdC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlT2JqZWN0LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW5JbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbi5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy93aXRoTGF0ZXN0RnJvbS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9zcmMvY29uc3RhbnRzL3NvdW5kLnRzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9zcmMvY29yZS9wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vc3JjL2NvcmUvYmFsbC50cyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL3NyYy9jb3JlL2dhbWUudHMiXSwibmFtZXMiOlsiY2FudmFzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGV4dCIsImdldENvbnRleHQiLCJQTEFZRVJfT05FX1NDT1JFX1giLCJ3aWR0aCIsIlBMQVlFUl9UV09fU0NPUkVfWCIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJkb25lIiwidmFsdWUiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZSIsInN0ZXAiLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsImkiLCJfX3JlYWQiLCJyIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJpbCIsImoiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwiYXBwbHkiLCJxIiwiUHJvbWlzZSIsImEiLCJyZXN1bWUiLCJyZXNvbHZlIiwidGhlbiIsImZ1bGZpbGwiLCJyZWplY3QiLCJzZXR0bGUiLCJzaGlmdCIsImlzRnVuY3Rpb24iLCJjdG9yRnVuYyIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJlcnJvcnMiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX3RlYXJkb3ducyIsInVuc3Vic2NyaWJlIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsImlzQXJyYXkiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInJlbW92ZSIsImVfMV8xIiwicmV0dXJuIiwiX3RlYXJkb3duc18xIiwiX3RlYXJkb3duc18xXzEiLCJ0ZWFyZG93bl8xIiwiZXhlY1RlYXJkb3duIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJlbXB0eSIsImlzU3Vic2NyaXB0aW9uIiwiQWN0aW9uIiwiX3N1cGVyIiwic2NoZWR1bGVyIiwid29yayIsInNjaGVkdWxlIiwic3RhdGUiLCJkZWxheSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImRlbGVnYXRlIiwiY2xlYXJJbnRlcnZhbCIsImhhbmRsZSIsInVuZGVmaW5lZCIsIkFzeW5jQWN0aW9uIiwiX3RoaXMiLCJwZW5kaW5nIiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiZmx1c2giLCJiaW5kIiwiX3NjaGVkdWxlciIsImV4ZWN1dGUiLCJfZXhlY3V0ZSIsIl9kZWxheSIsImVycm9yVmFsdWUiLCJlcnJvcmVkIiwiYWN0aW9ucyIsImRhdGVUaW1lc3RhbXBQcm92aWRlciIsIm5vdyIsIkRhdGUiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJfYWN0aXZlIiwiX3NjaGVkdWxlZCIsImFjdGlvbiIsImFzeW5jU2NoZWR1bGVyIiwiY29uZmlnIiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJ3cmFwRm9yRXJyb3JIYW5kbGluZyIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJoYW5kbGVyIiwiX3N5bmNFcnJvckhhY2tfaXNTdWJzY3JpYmluZyIsIl9fc3luY0Vycm9yIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm9ic2VydmFibGUiLCJpZGVudGl0eSIsIngiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwiZm4iLCJPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwiX3N1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsInNvdXJjZSIsImlzT2JzZXJ2ZXIiLCJfZGVwcmVjYXRlZFN5bmNFcnJvclN1YnNjcmliZSIsIl90cnlTdWJzY3JpYmUiLCJsb2NhbFN1YnNjcmliZXIiLCJkZXN0Iiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwic3Vic2NyaXB0aW9uIiwicGlwZSIsIm9wZXJhdGlvbnMiLCJ0b1Byb21pc2UiLCJpc1NjaGVkdWxlciIsImFuaW1hdGlvbkZyYW1lUHJvdmlkZXIiLCJjYWxsYmFjayIsInJlcXVlc3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInRpbWVzdGFtcCIsIkFuaW1hdGlvbkZyYW1lQWN0aW9uIiwiYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIiLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlciIsImNvdW50Iiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwicHJvamVjdCIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZSIsInN1YiIsInJlc3VsdCIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0l0ZXJhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwib2JqIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlT2JzZXJ2YWJsZSIsInNjaGVkdWxlUHJvbWlzZSIsImNhdWdodFNjaGVkdWxlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwiaW5uZXJGcm9tIiwib2JzIiwiZnJvbUFycmF5TGlrZSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFycmF5IiwiYXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGVfMSIsImFzeW5jSXRlcmFibGVfMV8xIiwiUCIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInByb2Nlc3MiLCJjYXRjaCIsIm1lcmdlTWFwIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbFRlYXJkb3duIiwiYnVmZmVyIiwiYWN0aXZlIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJtYXBPbmVPck1hbnlBcmdzIiwiY2FsbE9yQXBwbHkiLCJpbnRlcm5hbEZyb21BcnJheSIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvIiwiZ2V0S2V5cyIsImtleXMiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsImZpcnN0XzEiLCJrZXkiLCJsYXN0IiwicG9wUmVzdWx0U2VsZWN0b3IiLCJwb3BTY2hlZHVsZXIiLCJwb3BOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPYmplY3QiLCJ2YWx1ZXMiLCJjb21iaW5lTGF0ZXN0SW5pdCIsIm9ic2VydmFibGVzIiwidmFsdWVUcmFuc2Zvcm0iLCJtYXliZVNjaGVkdWxlIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsInNsaWNlIiwic2NhbkludGVybmFscyIsImFjY3VtdWxhdG9yIiwic2VlZCIsImhhc1NlZWQiLCJlbWl0T25OZXh0IiwiZW1pdEJlZm9yZUNvbXBsZXRlIiwiaGFzU3RhdGUiLCJzY2FuIiwid2l0aExhdGVzdEZyb20iLCJpbnB1dHMiLCJsZW4iLCJvdGhlclZhbHVlcyIsImhhc1ZhbHVlIiwicmVhZHkiLCJldmVyeSIsImRpc3RpbmN0VW50aWxDaGFuZ2VkIiwiY29tcGFyYXRvciIsImtleVNlbGVjdG9yIiwiZGVmYXVsdENvbXBhcmUiLCJwcmV2aW91c0tleSIsImZpcnN0IiwiY3VycmVudEtleSIsIm1lcmdlQWxsIiwibWVyZ2UiLCJzb3VyY2VzIiwiU291bmQiLCJzb3VuZCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJzdHlsZSIsImRpc3BsYXkiLCJwbGF5IiwiUGxheWVyIiwiaGVpZ2h0Iiwic3BlZWQiLCJwb3NpdGlvbiIsInNjb3JlIiwiYmVnaW5QYXRoIiwicmVjdCIsImZpbGwiLCJjbG9zZVBhdGgiLCJmb250IiwiZmlsbFRleHQiLCJiYWxsIiwicGxheWVyTm8iLCJnZXRCYWxsUG9zaXRpb25ZIiwiZ2V0QmFsbFBvc2l0aW9uWCIsImNvbnNvbGUiLCJsb2ciLCJwbGF5ZXJIaXRTb3VuZCIsInBvc2l0aW9uWSIsInRpY2tlciIsImRpcmVjdGlvblkiLCJkZWx0YVRpbWUiLCJNYXRoIiwibWF4IiwibWluIiwiZmlsbFN0eWxlIiwiY29sbGlzaW9ucyIsInBsYXllcjEiLCJwbGF5ZXIyIiwiZmxvb3IiLCJjZWlsaW5nIiwid2FsbCIsImRpciIsInJhbmRvbSIsInBvcyIsInBvc1AxIiwicG9zUDIiLCJiYWxsU3BlZWQiLCJiYWxsUmFkaXVzIiwiZGlyZWN0aW9uIiwiYXJjIiwiUEkiLCJJTklUSUFMX09CSkVDVFMiLCJ0aWNrZXIkIiwicGVyaW9kIiwiZHVlVGltZSIsImludGVydmFsT3JTY2hlZHVsZXIiLCJpbnRlcnZhbER1cmF0aW9uIiwiZHVlIiwiaXNOYU4iLCJ0aW1lciIsInRpbWUiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJwbGF5ZXIxaW5wdXQkIiwiZXZlbnQiLCJrZXlDb2RlIiwicGxheWVyMVBhZGRsZSQiLCJtb3ZlUGxheWVyIiwicGxheWVyMklucHV0JCIsInBsYXllcjJQYWRkbGUkIiwiZGlyZWN0b24iLCJnYW1lIiwidGV4dEFsaWduIiwidGV4dCIsImNsZWFyUmVjdCIsInBvc1kiLCJzZXRQb3NpdGlvblkiLCJkcmF3UGxheWVyIiwiZHJhd1Njb3JlUGxheWVyIiwibW92ZUJhbGwiLCJoaXRQbGF5ZXIiLCJib3VuY2VYIiwic2V0QmFsbERpcmVjdGlvblJhbmRvbVkiLCJzY29yZWQiLCJyZXNldFBvc2l0aW9uIiwic2NvcmVTb3VuZCIsImdldEJhbGxSYWRpdXMiLCJ0ZXJyYWluSGl0U291bmQiLCJib3VuY2VZIiwiZHJhd1RpdGxlIiwiZHJhd0NvbnRvcmxzIiwib2JqZWN0cyQiLCJjYWxjdWxhdGVPYmplY3RzIiwiY29tYmluZUxhdGVzdCIsIm9iamVjdHMiLCJ1cGRhdGVQbGF5ZXIxIiwidXBkYXRlUGxheWVyMiIsInVwZGF0ZVNjb3JlUGxheWVyMSIsInVwZGF0ZVNjb3JlUGxheWVyMiIsImRyYXdCYWxsIiwiZ2V0U2NvcmUiLCJkcmF3R2FtZU92ZXIiXSwibWFwcGluZ3MiOiI7bUJBQU8sTUFBTUEsRUFBU0MsU0FBU0MsY0FBYyxVQUNoQ0MsRUFBVUgsRUFBT0ksV0FBVyxNQVc1QkMsR0FGd0JGLEVBQVFILE9BQU9NLE1BRWxCTixFQUFPTSxNQUFRLEVBQUksSUFDeENDLEVBQXFCUCxFQUFPTSxNQUFRLEVBQUksR0NHckQsSUFBSUUsRUFBZ0IsU0FBU0MsRUFBR0MsR0FJNUIsT0FIQUYsRUFBZ0JHLE9BQU9DLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCQyxPQUFTLFNBQVVMLEVBQUdDLEdBQUtELEVBQUVJLFVBQVlILElBQ3ZFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSyxLQUFLTCxFQUFPQyxPQUFPSyxVQUFVQyxlQUFlQyxLQUFLUixFQUFHSyxLQUFJTixFQUFFTSxHQUFLTCxFQUFFSyxNQUMzRU4sRUFBR0MsSUFHckIsU0FBU1MsRUFBVVYsRUFBR0MsR0FDekIsR0FBaUIsbUJBQU5BLEdBQTBCLE9BQU5BLEVBQzNCLE1BQU0sSUFBSVUsVUFBVSx1QkFBeUJDLE9BQU9YLEdBQUssaUNBRTdELFNBQVNZLElBQU9DLEtBQUtDLFlBQWNmLEVBRG5DRCxFQUFjQyxFQUFHQyxHQUVqQkQsRUFBRU8sVUFBa0IsT0FBTk4sRUFBYUMsT0FBT2MsT0FBT2YsSUFBTVksRUFBR04sVUFBWU4sRUFBRU0sVUFBVyxJQUFJTSxHQW1ENUUsU0FBU0ksRUFBWUMsRUFBU0MsR0FDakMsSUFBc0dDLEVBQUdDLEVBQUdDLEVBQUdDLEVBQTNHQyxFQUFJLENBQUVDLE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUEosRUFBRSxHQUFR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QUFpQnJGLElBQUssS0FBTTRDLEtBQVkyQyxHQUFLcUIsaUJBQWlCaEUsSUFBU3VCLEtBaUI5SDNDLEdWakZDLFdBRUgsSUFEQSxJQUFJMVAsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVUvRixPQUFROEYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCLElBQUlSLEVBQVlxTixHQUFhOU0sR0FDekI2SixFQUFpQmdELEdBQWtCN00sR0FDbkNqQyxFQUFLME8sR0FBcUJ6TSxHQUFPb04sRUFBY3JQLEVBQUdpQyxLQUFNd00sRUFBT3pPLEVBQUd5TyxLQUN0RSxHQUEyQixJQUF2QlksRUFBWWpULE9BQ1osT0FBT2UsR0FBSyxHQUFJdUUsR0FFcEIsSUFBSThILEVBQVMsSUFBSSxFQUFXNEYsR0FBa0JDLEVBQWEzTixFQUFXK00sRUFFOUQsU0FBVVUsR0FBVSxPQUFPRCxHQUFhVCxFQUFNVSxJQUU5Q2pKLElBQ1IsT0FBTzRGLEVBQWlCdEMsRUFBTzlCLEtBQUtzRixHQUFpQmxCLElBQW1CdEMsRVVpRS9Ed04sQ0FBYyxDQUN2QnpDLEdBQ0FjLEdBQ0F5QixHQUNBdEIsS0FDRDdPLFdBckJILFVBQWlCb00sRUFBUVEsRUFBUzBELEVBQVN6RCxJQUN2Q2phLEVBQVFzYyxVQUFVLEVBQUcsRUFBR3pjLEVBQU9NLE1BQU9OLEVBQU95WSxRQUM3QzZELEdBQUt3QixjQUFjM0QsR0FDbkJtQyxHQUFLeUIsY0FBYzNELEdBQ25Ca0MsR0FBSzBCLHFCQUNMMUIsR0FBSzJCLHFCQUNMSixFQUFRMUUsS0FBSytFLFdBQ1RMLEVBQVExRCxRQUFRZ0UsV0FBYSxJQUM3QjdCLEdBQUs4QixhQUFhLGtCQUNsQjdGLEdBQUs3UixlQUVMbVgsRUFBUXpELFFBQVErRCxXQUFhLElBQzdCN0IsR0FBSzhCLGFBQWEsa0JBQ2xCN0YsR0FBSzdSLG1CIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpO1xyXG5leHBvcnQgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbmV4cG9ydCBjb25zdCBQQURETEVfS0VZU19QTEFZRVJfT05FID0ge1xyXG4gICAgdXA6IDM4LFxyXG4gICAgZG93bjogNDAsXHJcbn07XHJcbmV4cG9ydCBjb25zdCBQQURETEVfS0VZU19QTEFZRVJfVFdPID0ge1xyXG4gICAgdXA6IDg3LFxyXG4gICAgZG93bjogODMsXHJcbn07XHJcbmV4cG9ydCBjb25zdCBQTEFZRVJfT05FX1BPU0lUSU9OX1ggPSBjb250ZXh0LmNhbnZhcy53aWR0aCAtIDQwO1xyXG5leHBvcnQgY29uc3QgUExBWUVSX1RXT19QT1NJVElPTl9YID0gMjA7XHJcbmV4cG9ydCBjb25zdCBQTEFZRVJfT05FX1NDT1JFX1ggPSBjYW52YXMud2lkdGggLyAyICsgMzA7XHJcbmV4cG9ydCBjb25zdCBQTEFZRVJfVFdPX1NDT1JFX1ggPSBjYW52YXMud2lkdGggLyAyIC0gMzA7XHJcbmV4cG9ydCBjb25zdCBQTEFZRVJfU0NPUkVfWSA9IDIwO1xyXG5leHBvcnQgY29uc3QgVElDS0VSX0lOVEVSVkFMID0gMTc7XHJcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGVhcmRvd25zID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxUZWFyZG93biA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbFRlYXJkb3duKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxUZWFyZG93bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICAgICAgaWYgKF90ZWFyZG93bnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZWFyZG93bnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90ZWFyZG93bnNfMSA9IF9fdmFsdWVzKF90ZWFyZG93bnMpLCBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCk7ICFfdGVhcmRvd25zXzFfMS5kb25lOyBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZWFyZG93bl8xID0gX3RlYXJkb3duc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RlYXJkb3duc18xXzEgJiYgIV90ZWFyZG93bnNfMV8xLmRvbmUgJiYgKF9iID0gX3RlYXJkb3duc18xLnJldHVybikpIF9iLmNhbGwoX3RlYXJkb3duc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjVGVhcmRvd24odGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl90ZWFyZG93bnMgPSAoX2EgPSB0aGlzLl90ZWFyZG93bnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX3RlYXJkb3ducyA9IHRoaXMuX3RlYXJkb3ducztcbiAgICAgICAgX3RlYXJkb3ducyAmJiBhcnJSZW1vdmUoX3RlYXJkb3ducywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY1RlYXJkb3duKHRlYXJkb3duKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGVhcmRvd24pKSB7XG4gICAgICAgIHRlYXJkb3duKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0ZWFyZG93bi51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHx8IHNldEludGVydmFsKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJJbnRlcnZhbCkgfHwgY2xlYXJJbnRlcnZhbCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWxQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCB7IGludGVydmFsUHJvdmlkZXIgfSBmcm9tICcuL2ludGVydmFsUHJvdmlkZXInO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChfc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gKCEhZSAmJiBlKSB8fCBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB8fCBzZXRUaW1lb3V0KS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgKG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0LCBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID09PSBudWxsIHx8IG5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5leHQuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgY29tcGxldGUgPSBjb21wbGV0ZSA9PT0gbnVsbCB8fCBjb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGxldGUuYmluZChjb250ZXh0XzEpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0ge1xuICAgICAgICAgICAgbmV4dDogbmV4dCA/IHdyYXBGb3JFcnJvckhhbmRsaW5nKG5leHQsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgICAgICBlcnJvcjogd3JhcEZvckVycm9ySGFuZGxpbmcoZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogZGVmYXVsdEVycm9ySGFuZGxlciwgX3RoaXMpLFxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlID8gd3JhcEZvckVycm9ySGFuZGxpbmcoY29tcGxldGUsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gd3JhcEZvckVycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLl9zeW5jRXJyb3JIYWNrX2lzU3Vic2NyaWJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuX19zeW5jRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhpcy5fZGVwcmVjYXRlZFN5bmNFcnJvclN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9kZXByZWNhdGVkU3luY0Vycm9yU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsU3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIGxvY2FsU3Vic2NyaWJlci5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgaWYgKG9wZXJhdG9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHRoaXMuc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHRoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdWJzY3JpYmVyLl9fc3luY0Vycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBkZXN0ID0gbG9jYWxTdWJzY3JpYmVyO1xuICAgICAgICB3aGlsZSAoZGVzdCkge1xuICAgICAgICAgICAgaWYgKCdfX3N5bmNFcnJvcicgaW4gZGVzdCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGRlc3QuX19zeW5jRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdCA9IGRlc3QuZGVzdGluYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxTdWJzY3JpYmVyLl9zeW5jRXJyb3JIYWNrX2lzU3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0aW9ucy5sZW5ndGggPyBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpIDogdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgdmFyIGFuaW1hdGlvbkZyYW1lUHJvdmlkZXIgPSB7XG4gICAgc2NoZWR1bGU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgdmFyIGNhbmNlbCA9IGNhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBkZWxlZ2F0ZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgICAgICBjYW5jZWwgPSBkZWxlZ2F0ZS5jYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFuZGxlID0gcmVxdWVzdChmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgICAgICBjYW5jZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsID09PSBudWxsIHx8IGNhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FuY2VsKGhhbmRsZSk7IH0pO1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnJlcXVlc3RBbmltYXRpb25GcmFtZSkgfHwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHx8IGNhbmNlbEFuaW1hdGlvbkZyYW1lKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb25GcmFtZVByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lUHJvdmlkZXIgfSBmcm9tICcuL2FuaW1hdGlvbkZyYW1lUHJvdmlkZXInO1xudmFyIEFuaW1hdGlvbkZyYW1lQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuX3NjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBzY2hlZHVsZXIuZmx1c2godW5kZWZpbmVkKTsgfSkpO1xuICAgIH07XG4gICAgQW5pbWF0aW9uRnJhbWVBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT0gbnVsbCAmJiB0aGlzLmRlbGF5ID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIuYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZUFjdGlvbjtcbn0oQXN5bmNBY3Rpb24pKTtcbmV4cG9ydCB7IEFuaW1hdGlvbkZyYW1lQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25GcmFtZUFjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBBbmltYXRpb25GcmFtZUFjdGlvbiB9IGZyb20gJy4vQW5pbWF0aW9uRnJhbWVBY3Rpb24nO1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgfSBmcm9tICcuL0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSBuZXcgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoQW5pbWF0aW9uRnJhbWVBY3Rpb24pO1xuZXhwb3J0IHZhciBhbmltYXRpb25GcmFtZSA9IGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWUuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xudmFyIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICBhY3Rpb24gPSBhY3Rpb24gfHwgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICB2YXIgY291bnQgPSBhY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKytpbmRleCA8IGNvdW50ICYmIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjbG9zZWQgPSB0aGlzLmNsb3NlZDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAhY2xvc2VkICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5mdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpOyB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgY2F1Z2h0U2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2NhdWdodFNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBjYXVnaHRTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNhdWdodFNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZXhlY3V0ZSwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV4ZWN1dGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F1Z2h0U2NoZWR1bGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsVGVhcmRvd24pIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWJTY2hlZHVsZXIgPyBzdWJzY3JpYmVyLmFkZChpbm5lclN1YlNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KSkgOiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbFRlYXJkb3duID09PSBudWxsIHx8IGFkZGl0aW9uYWxUZWFyZG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbFRlYXJkb3duKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBmcm9tQXJyYXlMaWtlIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbEZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikgOiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlTWFwJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgaW50ZXJuYWxGcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbnRlcm5hbEZyb21BcnJheSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlTGlzdGVuZXIpO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJ2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgZ2V0S2V5cyA9IE9iamVjdC5rZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIGZpcnN0XzEgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoaXNBcnJheShmaXJzdF8xKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgYXJnczogZmlyc3RfMSwga2V5czogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BPSk8oZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0S2V5cyhmaXJzdF8xKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJnczoga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZmlyc3RfMVtrZXldOyB9KSxcbiAgICAgICAgICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBhcmdzOiBhcmdzLCBrZXlzOiBudWxsIH07XG59XG5mdW5jdGlvbiBpc1BPSk8ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBnZXRQcm90b3R5cGVPZihvYmopID09PSBvYmplY3RQcm90bztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3NBcmdBcnJheU9yT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KGtleXMsIHZhbHVlcykge1xuICAgIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXksIGkpIHsgcmV0dXJuICgocmVzdWx0W2tleV0gPSB2YWx1ZXNbaV0pLCByZXN1bHQpOyB9LCB7fSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNGaXJzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRmlyc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRmlyc3RWYWx1ZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nRmlyc3RWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWVUcmFuc2Zvcm0odmFsdWVzLnNsaWNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBzdWJzY3JpYmVyKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGV4ZWN1dGUsIHN1YnNjcmlwdGlvbikge1xuICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZXhlY3V0ZSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGhhc1NlZWQsIGVtaXRPbk5leHQsIGVtaXRCZWZvcmVDb21wbGV0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNTdGF0ZSA9IGhhc1NlZWQ7XG4gICAgICAgIHZhciBzdGF0ZSA9IHNlZWQ7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuICAgICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LCBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgc2NhbkludGVybmFscyB9IGZyb20gJy4vc2NhbkludGVybmFscyc7XG5leHBvcnQgZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHJldHVybiBvcGVyYXRlKHNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgdHJ1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nhbi5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmltcG9ydCB7IHBvcFJlc3VsdFNlbGVjdG9yIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmV4cG9ydCBmdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgaW5wdXRzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgaW5wdXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBwcm9qZWN0ID0gcG9wUmVzdWx0U2VsZWN0b3IoaW5wdXRzKTtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsZW4gPSBpbnB1dHMubGVuZ3RoO1xuICAgICAgICB2YXIgb3RoZXJWYWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gaW5wdXRzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7XG4gICAgICAgIHZhciByZWFkeSA9IGZhbHNlO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpbm5lckZyb20oaW5wdXRzW2ldKS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBvdGhlclZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICghcmVhZHkgJiYgIWhhc1ZhbHVlW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1ZhbHVlW2ldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgKHJlYWR5ID0gaGFzVmFsdWUuZXZlcnkoaWRlbnRpdHkpKSAmJiAoaGFzVmFsdWUgPSBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBub29wKSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF9fc3ByZWFkQXJyYXkoW3ZhbHVlXSwgX19yZWFkKG90aGVyVmFsdWVzKSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QgPyBwcm9qZWN0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHZhbHVlcykpKSA6IHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJhdG9yLCBrZXlTZWxlY3Rvcikge1xuICAgIGlmIChrZXlTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGtleVNlbGVjdG9yID0gaWRlbnRpdHk7IH1cbiAgICBjb21wYXJhdG9yID0gY29tcGFyYXRvciAhPT0gbnVsbCAmJiBjb21wYXJhdG9yICE9PSB2b2lkIDAgPyBjb21wYXJhdG9yIDogZGVmYXVsdENvbXBhcmU7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJldmlvdXNLZXk7XG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGZpcnN0IHx8ICFjb21wYXJhdG9yKHByZXZpb3VzS2V5LCBjdXJyZW50S2V5KSkge1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNLZXkgPSBjdXJyZW50S2V5O1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuaW1wb3J0IHsgaW50ZXJuYWxGcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IHBvcE51bWJlciwgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IHBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICB2YXIgY29uY3VycmVudCA9IHBvcE51bWJlcihhcmdzLCBJbmZpbml0eSk7XG4gICAgdmFyIHNvdXJjZXMgPSBhcmdzO1xuICAgIHJldHVybiAhc291cmNlcy5sZW5ndGhcbiAgICAgICAgP1xuICAgICAgICAgICAgRU1QVFlcbiAgICAgICAgOiBzb3VyY2VzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbShzb3VyY2VzWzBdKVxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIG1lcmdlQWxsKGNvbmN1cnJlbnQpKGludGVybmFsRnJvbUFycmF5KHNvdXJjZXMsIHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiZXhwb3J0IGNsYXNzIFNvdW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgICBwbGF5ZXJIaXRTb3VuZCgpIHtcclxuICAgICAgICBsZXQgc291bmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XHJcbiAgICAgICAgc291bmQuc3JjID0gXCIuLi9hc3NldHMvcGFkZGxlX2hpdC53YXZcIjtcclxuICAgICAgICBzb3VuZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgc291bmQucGxheSgpO1xyXG4gICAgfVxyXG4gICAgdGVycmFpbkhpdFNvdW5kKCkge1xyXG4gICAgICAgIGxldCBzb3VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKTtcclxuICAgICAgICBzb3VuZC5zcmMgPSBcIi4uL2Fzc2V0cy90ZXJyYWluX2hpdC53YXZcIjtcclxuICAgICAgICBzb3VuZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgc291bmQucGxheSgpO1xyXG4gICAgfVxyXG4gICAgc2NvcmVTb3VuZCgpIHtcclxuICAgICAgICBsZXQgc291bmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XHJcbiAgICAgICAgc291bmQuc3JjID0gXCIuLi9hc3NldHMvc2NvcmUud2F2XCI7XHJcbiAgICAgICAgc291bmQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNvdW5kLnBsYXkoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb250ZXh0IH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgU291bmQgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3NvdW5kXCI7XHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXIge1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgc3BlZWQsIHBvc2l0aW9uLCBzY29yZSkge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICAgIHRoaXMuc2NvcmUgPSBzY29yZTtcclxuICAgIH1cclxuICAgIGdldFNjb3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjb3JlO1xyXG4gICAgfVxyXG4gICAgc2NvcmVkKCkge1xyXG4gICAgICAgIHRoaXMuc2NvcmUrKztcclxuICAgIH1cclxuICAgIGdldFBvc2l0aW9uWSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi55O1xyXG4gICAgfVxyXG4gICAgc2V0UG9zaXRpb25ZKHkpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgfVxyXG4gICAgZHJhd1BsYXllcigpIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQucmVjdCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbiAgICBkcmF3U2NvcmVQbGF5ZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IFwiMjRweCBBcmlhbFwiO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQodGhpcy5zY29yZS50b1N0cmluZygpLCB4LCB5KTtcclxuICAgIH1cclxuICAgIC8vMS0+IHBsYXllciAxIHx8IDItPnBsYXllciAyXHJcbiAgICBoaXRQbGF5ZXIoYmFsbCwgcGxheWVyTm8pIHtcclxuICAgICAgICBpZiAocGxheWVyTm8gPT0gMSkge1xyXG4gICAgICAgICAgICBpZiAoYmFsbC5nZXRCYWxsUG9zaXRpb25ZKCkgPiB0aGlzLnBvc2l0aW9uLnkgJiZcclxuICAgICAgICAgICAgICAgIGJhbGwuZ2V0QmFsbFBvc2l0aW9uWSgpIDwgdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oZWlnaHQgJiZcclxuICAgICAgICAgICAgICAgIGJhbGwuZ2V0QmFsbFBvc2l0aW9uWCgpID4gY29udGV4dC5jYW52YXMud2lkdGggLSB0aGlzLndpZHRoICogMikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJIaXQgcGxheWVyMVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VuZCA9IG5ldyBTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgc291bmQucGxheWVySGl0U291bmQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwbGF5ZXJObyA9PSAyKSB7XHJcbiAgICAgICAgICAgIGlmIChiYWxsLmdldEJhbGxQb3NpdGlvblkoKSA+IHRoaXMucG9zaXRpb24ueSAmJlxyXG4gICAgICAgICAgICAgICAgYmFsbC5nZXRCYWxsUG9zaXRpb25ZKCkgPCB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLmhlaWdodCAmJlxyXG4gICAgICAgICAgICAgICAgYmFsbC5nZXRCYWxsUG9zaXRpb25YKCkgPCB0aGlzLndpZHRoICogMikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJoaXQgcGxheWVyIDJcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgc291bmQgPSBuZXcgU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHNvdW5kLnBsYXllckhpdFNvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBtb3ZlUGxheWVyKHBvc2l0aW9uWSwgdGlja2VyLCBkaXJlY3Rpb25ZKSB7XHJcbiAgICAgICAgbGV0IG5leHQgPSBwb3NpdGlvblkgKyBkaXJlY3Rpb25ZICogdGlja2VyLmRlbHRhVGltZSAqIHRoaXMuc3BlZWQ7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKG5leHQsIGNvbnRleHQuY2FudmFzLmhlaWdodCAtIHRoaXMuaGVpZ2h0KSwgMCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFsbCB9IGZyb20gXCIuL2NvcmUvYmFsbFwiO1xyXG5pbXBvcnQgeyBjYW52YXMsIGNvbnRleHQsIFBBRERMRV9LRVlTX1BMQVlFUl9PTkUsIFBBRERMRV9LRVlTX1BMQVlFUl9UV08sIFRJQ0tFUl9JTlRFUlZBTCwgfSBmcm9tIFwiLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLCBjb21iaW5lTGF0ZXN0LCBmcm9tRXZlbnQsIGludGVydmFsLCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHNjYW4sIHdpdGhMYXRlc3RGcm9tLCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL2NvcmUvcGxheWVyXCI7XHJcbmltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi9jb3JlL2dhbWVcIjtcclxuY29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbmxldCBjb2xsaXNpb25zID0ge1xyXG4gICAgcGxheWVyMTogZmFsc2UsXHJcbiAgICBwbGF5ZXIyOiBmYWxzZSxcclxuICAgIGZsb29yOiBmYWxzZSxcclxuICAgIGNlaWxpbmc6IGZhbHNlLFxyXG4gICAgd2FsbDogZmFsc2VcclxufTtcclxubGV0IGRpciA9IHtcclxuICAgIHg6IChNYXRoLnJhbmRvbSgpKSAqIDIgKiAoTWF0aC5yYW5kb20oKSA8IDAuNSA/IDEgOiAtMSksXHJcbiAgICB5OiAoTWF0aC5yYW5kb20oKSkgKiAyICogKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAxIDogLTEpLFxyXG59O1xyXG5sZXQgcG9zID0ge1xyXG4gICAgeDogY2FudmFzLndpZHRoIC8gMixcclxuICAgIHk6IGNhbnZhcy5oZWlnaHQgLyAyLFxyXG59O1xyXG5sZXQgcG9zUDEgPSB7XHJcbiAgICB4OiBjYW52YXMud2lkdGggLSA0MCxcclxuICAgIHk6IGNhbnZhcy5oZWlnaHQgLyAyLFxyXG59O1xyXG5sZXQgcG9zUDIgPSB7XHJcbiAgICB4OiAyMCxcclxuICAgIHk6IGNhbnZhcy5oZWlnaHQgLyAyLFxyXG59O1xyXG5sZXQgYmFsbCA9IG5ldyBCYWxsKDE1MCwgOCwgcG9zLCBkaXIpO1xyXG5sZXQgcGxheWVyMSA9IG5ldyBQbGF5ZXIoMjAsIDcwLCAzNTAsIHBvc1AxLCAwKTtcclxubGV0IHBsYXllcjIgPSBuZXcgUGxheWVyKDIwLCA3MCwgMzUwLCBwb3NQMiwgMCk7XHJcbmNvbnN0IElOSVRJQUxfT0JKRUNUUyA9IHtcclxuICAgIGJhbGwsXHJcbiAgICBjb2xsaXNpb25zLFxyXG4gICAgcGxheWVyMSxcclxuICAgIHBsYXllcjIsXHJcbn07XHJcbmNvbnN0IHRpY2tlciQgPSBpbnRlcnZhbChUSUNLRVJfSU5URVJWQUwsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKS5waXBlKG1hcCgoKSA9PiAoe1xyXG4gICAgdGltZTogRGF0ZS5ub3coKSxcclxuICAgIGRlbHRhVGltZTogbnVsbCxcclxufSkpLCBzY2FuKChwcmV2aW91cywgY3VycmVudCkgPT4gKHtcclxuICAgIHRpbWU6IGN1cnJlbnQudGltZSxcclxuICAgIGRlbHRhVGltZTogKGN1cnJlbnQudGltZSAtIHByZXZpb3VzLnRpbWUpIC8gMTAwMCxcclxufSkpKTtcclxuY29uc3QgcGxheWVyMWlucHV0JCA9IG1lcmdlKGZyb21FdmVudChkb2N1bWVudCwgXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xyXG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XHJcbiAgICAgICAgY2FzZSBQQURETEVfS0VZU19QTEFZRVJfT05FLnVwOlxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgY2FzZSBQQURETEVfS0VZU19QTEFZRVJfT05FLmRvd246XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG59KSwgZnJvbUV2ZW50KGRvY3VtZW50LCBcImtleXVwXCIsICgpID0+IDApKTtcclxuY29uc3QgcGxheWVyMVBhZGRsZSQgPSB0aWNrZXIkLnBpcGUod2l0aExhdGVzdEZyb20ocGxheWVyMWlucHV0JCksIHNjYW4oKHBvc2l0aW9uLCBbdGlja2VyLCBkaXJlY3Rpb25dKSA9PiBwbGF5ZXIxLm1vdmVQbGF5ZXIocG9zaXRpb24sIHRpY2tlciwgZGlyZWN0aW9uKSwgY2FudmFzLndpZHRoIC8gMiksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xyXG5jb25zdCBwbGF5ZXIySW5wdXQkID0gbWVyZ2UoZnJvbUV2ZW50KGRvY3VtZW50LCBcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIFBBRERMRV9LRVlTX1BMQVlFUl9UV08udXA6XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICBjYXNlIFBBRERMRV9LRVlTX1BMQVlFUl9UV08uZG93bjpcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn0pLCBmcm9tRXZlbnQoZG9jdW1lbnQsIFwia2V5dXBcIiwgKCkgPT4gMCkpO1xyXG5jb25zdCBwbGF5ZXIyUGFkZGxlJCA9IHRpY2tlciQucGlwZSh3aXRoTGF0ZXN0RnJvbShwbGF5ZXIySW5wdXQkKSwgc2NhbigocG9zaXRpb24sIFt0aWNrZXIsIGRpcmVjdG9uXSkgPT4gcGxheWVyMi5tb3ZlUGxheWVyKHBvc2l0aW9uLCB0aWNrZXIsIGRpcmVjdG9uKSwgY2FudmFzLmhlaWdodCAvIDIpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcclxubGV0IGdhbWUgPSBuZXcgR2FtZShwbGF5ZXIxLCBwbGF5ZXIyLCBiYWxsLCBjb2xsaXNpb25zKTtcclxuZ2FtZS5kcmF3VGl0bGUoKTtcclxuZ2FtZS5kcmF3Q29udG9ybHMoKTtcclxuY29uc3Qgb2JqZWN0cyQgPSB0aWNrZXIkLnBpcGUod2l0aExhdGVzdEZyb20ocGxheWVyMVBhZGRsZSQsIHBsYXllcjJQYWRkbGUkKSwgc2Nhbigoe30sIFt0aWNrZXJdKSA9PiBnYW1lLmNhbGN1bGF0ZU9iamVjdHModGlja2VyKSwgSU5JVElBTF9PQkpFQ1RTKSk7XHJcbmZ1bmN0aW9uIHVwZGF0ZShbdGlja2VyLCBwbGF5ZXIxLCBvYmplY3RzLCBwbGF5ZXIyXSkge1xyXG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGdhbWUudXBkYXRlUGxheWVyMShwbGF5ZXIxKTtcclxuICAgIGdhbWUudXBkYXRlUGxheWVyMihwbGF5ZXIyKTtcclxuICAgIGdhbWUudXBkYXRlU2NvcmVQbGF5ZXIxKCk7XHJcbiAgICBnYW1lLnVwZGF0ZVNjb3JlUGxheWVyMigpO1xyXG4gICAgb2JqZWN0cy5iYWxsLmRyYXdCYWxsKCk7XHJcbiAgICBpZiAob2JqZWN0cy5wbGF5ZXIxLmdldFNjb3JlKCkgPiA1KSB7XHJcbiAgICAgICAgZ2FtZS5kcmF3R2FtZU92ZXIoXCJQbGF5ZXIgMSB3aW5zIVwiKTtcclxuICAgICAgICBwbGF5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0cy5wbGF5ZXIyLmdldFNjb3JlKCkgPiA1KSB7XHJcbiAgICAgICAgZ2FtZS5kcmF3R2FtZU92ZXIoXCJQbGF5ZXIgMiB3aW5zIVwiKTtcclxuICAgICAgICBwbGF5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgcGxheSA9IGNvbWJpbmVMYXRlc3QoW1xyXG4gICAgdGlja2VyJCxcclxuICAgIHBsYXllcjFQYWRkbGUkLFxyXG4gICAgb2JqZWN0cyQsXHJcbiAgICBwbGF5ZXIyUGFkZGxlJCxcclxuXSkuc3Vic2NyaWJlKHVwZGF0ZSk7XHJcbiIsImltcG9ydCB7IGNhbnZhcywgY29udGV4dCB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBCYWxsIHtcclxuICAgIGNvbnN0cnVjdG9yKGJhbGxTcGVlZCwgYmFsbFJhZGl1cywgcG9zaXRpb24sIGRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuYmFsbFNwZWVkID0gYmFsbFNwZWVkO1xyXG4gICAgICAgIHRoaXMuYmFsbFJhZGl1cyA9IGJhbGxSYWRpdXM7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0QmFsbFNwZWVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhbGxTcGVlZDtcclxuICAgIH1cclxuICAgIGdldEJhbGxSYWRpdXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFsbFJhZGl1cztcclxuICAgIH1cclxuICAgIGdldEJhbGxQb3NpdGlvblgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueDtcclxuICAgIH1cclxuICAgIGdldEJhbGxQb3NpdGlvblkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcclxuICAgIH1cclxuICAgIHNldEJhbGxQb3NpdGlvblgoeCkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XHJcbiAgICB9XHJcbiAgICBzZXRCYWxsUG9zaXRpb25ZKHkpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgfVxyXG4gICAgcmVzZXRQb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSBjYW52YXMud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IGNhbnZhcy5oZWlnaHQgLyAyO1xyXG4gICAgfVxyXG4gICAgc2V0QmFsbERpcmVjdGlvblJhbmRvbSgpIHtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi54ID0gKE1hdGgucmFuZG9tKCkpICogMiAqIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi55ID0gKE1hdGgucmFuZG9tKCkpICogMiAqIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKTtcclxuICAgIH1cclxuICAgIHNldEJhbGxEaXJlY3Rpb25SYW5kb21ZKCkge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uLnkgPSAoTWF0aC5yYW5kb20oKSkgKiAyICogKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAxIDogLTEpO1xyXG4gICAgfVxyXG4gICAgYm91bmNlWCgpIHtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi54ID0gLXRoaXMuZGlyZWN0aW9uLng7XHJcbiAgICB9XHJcbiAgICBib3VuY2VZKCkge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uLnkgPSAtdGhpcy5kaXJlY3Rpb24ueTtcclxuICAgIH1cclxuICAgIGRyYXdCYWxsKCkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmModGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIHRoaXMuYmFsbFJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbiAgICBtb3ZlQmFsbCh0aWNrZXIpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy5kaXJlY3Rpb24ueCAqIHRpY2tlci5kZWx0YVRpbWUgKiB0aGlzLmJhbGxTcGVlZDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy5kaXJlY3Rpb24ueSAqIHRpY2tlci5kZWx0YVRpbWUgKiB0aGlzLmJhbGxTcGVlZDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gJy4vdGltZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICBpZiAocGVyaW9kIDwgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGltZXIocGVyaW9kLCBwZXJpb2QsIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyBhcyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XG4gICAgaWYgKGludGVydmFsT3JTY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIoaW50ZXJ2YWxPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGR1ZSA9IGlzVmFsaWREYXRlKGR1ZVRpbWUpID8gK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkgOiBkdWVUaW1lO1xuICAgICAgICBpZiAoZHVlIDwgMCkge1xuICAgICAgICAgICAgZHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIGludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZHVlKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBjYW52YXMsIGNvbnRleHQsIFBMQVlFUl9PTkVfU0NPUkVfWCwgUExBWUVSX1NDT1JFX1ksIFBMQVlFUl9UV09fU0NPUkVfWCwgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBTb3VuZCB9IGZyb20gXCIuLi9jb25zdGFudHMvc291bmRcIjtcclxuZXhwb3J0IGNsYXNzIEdhbWUge1xyXG4gICAgY29uc3RydWN0b3IocGxheWVyMSwgcGxheWVyMiwgYmFsbCwgY29sbGlzaW9ucykge1xyXG4gICAgICAgIHRoaXMucGxheWVyMSA9IHBsYXllcjE7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIyID0gcGxheWVyMjtcclxuICAgICAgICB0aGlzLmJhbGwgPSBiYWxsO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucyA9IGNvbGxpc2lvbnM7XHJcbiAgICB9XHJcbiAgICBkcmF3VGl0bGUoKSB7XHJcbiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IFwiYm9sZCA2MHB4IENvdXJpZXIgTmV3XCI7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChcIlAgTyBOIEdcIiwgY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIgLSA2MCk7XHJcbiAgICB9XHJcbiAgICBkcmF3Q29udG9ybHMoKSB7XHJcbiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IFwiYm9sZCAzMHB4IENvdXJpZXIgTmV3XCI7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChcIlByZXNzIGFueSBidXR0b24gdG8gc3RhcnRcIiwgY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpO1xyXG4gICAgfVxyXG4gICAgZHJhd0dhbWVPdmVyKHRleHQpIHtcclxuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdChjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiwgY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICBjb250ZXh0LmZvbnQgPSBcIjIwcHggQXJpYWxcIjtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVBsYXllcjEocG9zWSkge1xyXG4gICAgICAgIHRoaXMucGxheWVyMS5zZXRQb3NpdGlvblkocG9zWSk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIxLmRyYXdQbGF5ZXIoKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVBsYXllcjIocG9zWSkge1xyXG4gICAgICAgIHRoaXMucGxheWVyMi5zZXRQb3NpdGlvblkocG9zWSk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIyLmRyYXdQbGF5ZXIoKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVNjb3JlUGxheWVyMSgpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjEuZHJhd1Njb3JlUGxheWVyKFBMQVlFUl9PTkVfU0NPUkVfWCwgUExBWUVSX1NDT1JFX1kpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU2NvcmVQbGF5ZXIyKCkge1xyXG4gICAgICAgIHRoaXMucGxheWVyMi5kcmF3U2NvcmVQbGF5ZXIoUExBWUVSX1RXT19TQ09SRV9YLCBQTEFZRVJfU0NPUkVfWSk7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVPYmplY3RzKHRpY2tlcikge1xyXG4gICAgICAgIHRoaXMuYmFsbC5tb3ZlQmFsbCh0aWNrZXIpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5wbGF5ZXIxID0gdGhpcy5wbGF5ZXIxLmhpdFBsYXllcih0aGlzLmJhbGwsIDEpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5wbGF5ZXIyID0gdGhpcy5wbGF5ZXIyLmhpdFBsYXllcih0aGlzLmJhbGwsIDIpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbnMucGxheWVyMSB8fCB0aGlzLmNvbGxpc2lvbnMucGxheWVyMikge1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuYm91bmNlWCgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuc2V0QmFsbERpcmVjdGlvblJhbmRvbVkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYmFsbC5nZXRCYWxsUG9zaXRpb25YKCkgPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIyLnNjb3JlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbnMud2FsbCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYmFsbC5yZXNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJhbGwuZ2V0QmFsbFBvc2l0aW9uWCgpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllcjEuc2NvcmVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9ucy53YWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5iYWxsLnJlc2V0UG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29sbGlzaW9ucy53YWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBzb3VuZCA9IG5ldyBTb3VuZCgpO1xyXG4gICAgICAgICAgICBzb3VuZC5zY29yZVNvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9ucy53YWxsID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5jZWlsaW5nID1cclxuICAgICAgICAgICAgdGhpcy5iYWxsLmdldEJhbGxQb3NpdGlvblkoKSA8IHRoaXMuYmFsbC5nZXRCYWxsUmFkaXVzKCk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25zLmZsb29yID1cclxuICAgICAgICAgICAgdGhpcy5iYWxsLmdldEJhbGxQb3NpdGlvblkoKSA+IGNhbnZhcy5oZWlnaHQgLSB0aGlzLmJhbGwuZ2V0QmFsbFJhZGl1cygpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbnMuY2VpbGluZyB8fCB0aGlzLmNvbGxpc2lvbnMuZmxvb3IpIHtcclxuICAgICAgICAgICAgbGV0IHNvdW5kID0gbmV3IFNvdW5kKCk7XHJcbiAgICAgICAgICAgIHNvdW5kLnRlcnJhaW5IaXRTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuYm91bmNlWSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiYWxsOiB0aGlzLmJhbGwsXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbnM6IHRoaXMuY29sbGlzaW9ucyxcclxuICAgICAgICAgICAgcGxheWVyMTogdGhpcy5wbGF5ZXIxLFxyXG4gICAgICAgICAgICBwbGF5ZXIyOiB0aGlzLnBsYXllcjJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=