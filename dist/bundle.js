/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={669:(t,e,n)=>{t.exports=n(609)},448:(t,e,n)=>{"use strict";var r=n(867),o=n(26),i=n(372),s=n(327),a=n(97),u=n(109),c=n(985),l=n(61);t.exports=function(t){return new Promise((function(e,n){var f=t.data,h=t.headers;r.isFormData(f)&&delete h["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",y=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";h.Authorization="Basic "+btoa(p+":"+y)}var v=a(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),s(v,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,i={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:t,request:d};o(e,n,i),d=null}},d.onabort=function(){d&&(n(l("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(l("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(l(e,t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var m=(t.withCredentials||c(v))&&t.xsrfCookieName?i.read(t.xsrfCookieName):void 0;m&&(h[t.xsrfHeaderName]=m)}if("setRequestHeader"in d&&r.forEach(h,(function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete h[e]:d.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),n(t),d=null)})),f||(f=null),d.send(f)}))}},609:(t,e,n)=>{"use strict";var r=n(867),o=n(849),i=n(321),s=n(185);function a(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var u=a(n(655));u.Axios=i,u.create=function(t){return a(s(u.defaults,t))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(t){return Promise.all(t)},u.spread=n(713),u.isAxiosError=n(268),t.exports=u,t.exports.default=u},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var r=n(263);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var r=n(867),o=n(327),i=n(782),s=n(572),a=n(185);function u(t){this.defaults=t,this.interceptors={request:new i,response:new i}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[s,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},u.prototype.getUri=function(t){return t=a(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,n){return this.request(a(n||{},{method:t,url:e,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,n,r){return this.request(a(r||{},{method:t,url:e,data:n}))}})),t.exports=u},782:(t,e,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},97:(t,e,n)=>{"use strict";var r=n(793),o=n(303);t.exports=function(t,e){return t&&!r(e)?o(t,e):e}},61:(t,e,n)=>{"use strict";var r=n(481);t.exports=function(t,e,n,o,i){var s=new Error(t);return r(s,e,n,o,i)}},572:(t,e,n)=>{"use strict";var r=n(867),o=n(527),i=n(502),s=n(655);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||s.adapter)(t).then((function(e){return a(t),e.data=o(e.data,e.headers,t.transformResponse),e}),(function(e){return i(e)||(a(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){e=e||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function u(t,e){return r.isPlainObject(t)&&r.isPlainObject(e)?r.merge(t,e):r.isPlainObject(e)?r.merge({},e):r.isArray(e)?e.slice():e}function c(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=u(void 0,t[o])):n[o]=u(t[o],e[o])}r.forEach(o,(function(t){r.isUndefined(e[t])||(n[t]=u(void 0,e[t]))})),r.forEach(i,c),r.forEach(s,(function(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=u(void 0,t[o])):n[o]=u(void 0,e[o])})),r.forEach(a,(function(r){r in e?n[r]=u(t[r],e[r]):r in t&&(n[r]=u(void 0,t[r]))}));var l=o.concat(i).concat(s).concat(a),f=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===l.indexOf(t)}));return r.forEach(f,c),n}},26:(t,e,n)=>{"use strict";var r=n(61);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},527:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},655:(t,e,n)=>{"use strict";var r=n(867),o=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,u={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=n(448)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(t){u.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){u.headers[t]=r.merge(i)})),t.exports=u},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var r=n(867);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var s=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),s.push(o(e)+"="+o(t))})))})),i=s.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,s){var a=[];a.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},109:(t,e,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,s={};return t?(r.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(s[e]&&o.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function s(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function u(t){if("[object Object]"!==o.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function c(t){return"[object Function]"===o.call(t)}function l(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:u,isUndefined:s,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:c,isStream:function(t){return a(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){u(e[r])&&u(n)?e[r]=t(e[r],n):u(n)?e[r]=t({},n):i(n)?e[r]=n.slice():e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,(function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";const t=document.querySelector("canvas"),e=t.getContext("2d"),r=e.canvas.width-40,o=t.width/2+30,i=t.width/2-30;var s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function l(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function f(t,e){for(var n=0,r=e.length,o=t.length;n<r;n++,o++)t[o]=e[n];return t}function h(t){return this instanceof h?(this.v=t,this):new h(t)}function d(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=o[t](e)).value instanceof h?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(t){l(i[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function l(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}function p(t){return"function"==typeof t}Object.create,Object.create;var y,v=((y=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),y.prototype.constructor=y,y);function m(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var b=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=c(i),a=s.next();!a.done;a=s.next())a.value.remove(this)}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}else i.remove(this);var u=this.initialTeardown;if(p(u))try{u()}catch(t){o=t instanceof v?t.errors:[t]}var h=this._teardowns;if(h){this._teardowns=null;try{for(var d=c(h),y=d.next();!y.done;y=d.next()){var m=y.value;try{g(m)}catch(t){o=null!=o?o:[],t instanceof v?o=f(f([],l(o)),l(t.errors)):o.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}if(o)throw new v(o)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)g(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&m(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&m(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function w(t){return t instanceof b||t&&"closed"in t&&p(t.remove)&&p(t.add)&&p(t.unsubscribe)}function g(t){p(t)?t():t.unsubscribe()}b.EMPTY;var x=function(t){function e(e,n){return t.call(this)||this}return a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(b),S={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=S.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,f([],l(t)))},clearInterval:function(t){var e=S.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},P=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),S.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;S.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,m(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(x),_={now:function(){return(_.delegate||Date).now()},delegate:void 0},E=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=_.now,t}(),A=function(t){function e(e,n){void 0===n&&(n=E.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return a(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(E),T=new A(P),B=T,O=null,j=null,R=void 0,k=!1,C=!1,I={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=I.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,f([],l(t)))},clearTimeout:function(t){var e=I.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function L(t){I.setTimeout((function(){if(!O)throw t;O(t)}))}function N(){}var q=U("C",void 0,void 0);function U(t,e,n){return{kind:t,value:e,error:n}}var F=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,w(e)&&e.add(n)):n.destination=X,n}return a(e,t),e.create=function(t,e,n){return new D(t,e,n)},e.prototype.next=function(t){this.isStopped?H(function(t){return U("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?H(U("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?H(q,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(b),D=function(t){function e(e,n,r){var o,i=t.call(this)||this;if(p(e))o=e;else if(e){var s;o=e.next,n=e.error,r=e.complete,i&&C?(s=Object.create(e)).unsubscribe=function(){return i.unsubscribe()}:s=e,o=null==o?void 0:o.bind(s),n=null==n?void 0:n.bind(s),r=null==r?void 0:r.bind(s)}return i.destination={next:o?M(o,i):N,error:M(null!=n?n:Y,i),complete:r?M(r,i):N},i}return a(e,t),e}(F);function M(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,f([],l(n)))}catch(t){if(k){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else L(t)}}}function Y(t){throw t}function H(t,e){var n=j;n&&I.setTimeout((function(){return n(t,e)}))}var X={closed:!0,next:N,error:Y,complete:N},z="function"==typeof Symbol&&Symbol.observable||"@@observable";function G(t){return t}function $(t){return 0===t.length?G:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var J=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=(r=t)&&r instanceof F||function(t){return t&&p(t.next)&&p(t.error)&&p(t.complete)}(r)&&w(r)?t:new D(t,e,n);if(k)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,s=this.source;o.add(i?i.call(o,s):s?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=V(e))((function(e,r){var o;o=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==o||o.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[z]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?$(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=V(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function V(t){var e;return null!==(e=null!=t?t:R)&&void 0!==e?e:Promise}function K(t){return t&&p(t.schedule)}var Q={schedule:function(t){var e=requestAnimationFrame,n=cancelAnimationFrame,r=Q.delegate;r&&(e=r.requestAnimationFrame,n=r.cancelAnimationFrame);var o=e((function(e){n=void 0,t(e)}));return new b((function(){return null==n?void 0:n(o)}))},requestAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Q.delegate;return((null==n?void 0:n.requestAnimationFrame)||requestAnimationFrame).apply(void 0,f([],l(t)))},cancelAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Q.delegate;return((null==n?void 0:n.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,f([],l(t)))},delegate:void 0},W=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e._scheduled||(e._scheduled=Q.requestAnimationFrame((function(){return e.flush(void 0)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(Q.cancelAnimationFrame(n),e._scheduled=void 0)},e}(P),Z=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.flush=function(t){this._active=!0,this._scheduled=void 0;var e,n=this.actions,r=-1;t=t||n.shift();var o=n.length;do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this._active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(A))(W);function tt(t){return function(e){if(function(t){return p(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var et=function(t){function e(e,n,r,o,i){var s=t.call(this,e)||this;return s.onFinalize=i,s._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return a(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(F);function nt(t,e){return tt((function(n,r){var o=0;n.subscribe(new et(r,(function(n){r.next(t.call(e,n,o++))})))}))}var rt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function ot(t){return p(null==t?void 0:t.then)}function it(t,e){return new J((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var st="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function at(t,e){if(!t)throw new Error("Iterable cannot be null");return new J((function(n){var r=new b;return r.add(e.schedule((function(){var o=t[Symbol.asyncIterator]();r.add(e.schedule((function(){var t=this;o.next().then((function(e){e.done?n.complete():(n.next(e.value),t.schedule())}))})))}))),r}))}function ut(t){return p(t[z])}function ct(t){return p(null==t?void 0:t[st])}function lt(t){return Symbol.asyncIterator&&p(null==t?void 0:t[Symbol.asyncIterator])}function ft(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function ht(t){return d(this,arguments,(function(){var e,n,r;return u(this,(function(o){switch(o.label){case 0:e=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,h(e.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,h(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,h(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function dt(t){return p(null==t?void 0:t.getReader)}function pt(t,e){return e?function(t,e){if(null!=t){if(ut(t))return function(t,e){return new J((function(n){var r=new b;return r.add(e.schedule((function(){var o=t[z]();r.add(o.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(rt(t))return it(t,e);if(ot(t))return function(t,e){return new J((function(n){return e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){n.next(t),n.add(e.schedule((function(){return n.complete()})))})))}),(function(t){n.add(e.schedule((function(){return n.error(t)})))}))}))}))}(t,e);if(lt(t))return at(t,e);if(ct(t))return function(t,e){return new J((function(n){var r;return n.add(e.schedule((function(){r=t[st](),function(t,e,n,r){void 0===r&&(r=0);var o=e.schedule((function(){try{n.call(this)}catch(e){t.error(e)}}),r);t.add(o)}(n,e,(function(){var t=r.next(),e=t.value;t.done?n.complete():(n.next(e),this.schedule())}))}))),function(){return p(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(dt(t))return function(t,e){return at(ht(t),e)}(t,e)}throw ft(t)}(t,e):yt(t)}function yt(t){if(t instanceof J)return t;if(null!=t){if(ut(t))return r=t,new J((function(t){var e=r[z]();if(p(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(rt(t))return vt(t);if(ot(t))return n=t,new J((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,L)}));if(lt(t))return mt(t);if(ct(t))return e=t,new J((function(t){var n,r;try{for(var o=c(e),i=o.next();!i.done;i=o.next()){var s=i.value;if(t.next(s),t.closed)return}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(dt(t))return mt(ht(t))}var e,n,r;throw ft(t)}function vt(t){return new J((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function mt(t){return new J((function(e){(function(t,e){var n,r,o,i,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return u(this,(function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=c(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),u.label=1;case 1:return[4,n.next()];case 2:if((r=u.sent()).done)return[3,4];if(s=r.value,e.next(s),e.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=u.sent(),o={error:a},[3,11];case 6:return u.trys.push([6,,9,10]),r&&!r.done&&(i=n.return)?[4,i.call(n)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(s,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function bt(t,e,n){return void 0===n&&(n=1/0),p(e)?bt((function(n,r){return nt((function(t,o){return e(n,t,r,o)}))(yt(t(n,r)))}),n):("number"==typeof e&&(n=e),tt((function(e,r){return function(t,e,n,r,o,i,s,a){var u=[],c=0,l=0,f=!1,h=function(){!f||u.length||c||e.complete()},d=function(t){return c<r?p(t):u.push(t)},p=function(t){c++;var o=!1;yt(n(t,l++)).subscribe(new et(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{c--;for(;u.length&&c<r;)t=void 0,t=u.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(new et(e,d,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var wt=Array.isArray;function gt(t){return nt((function(e){return function(t,e){return wt(e)?t.apply(void 0,f([],l(e))):t(e)}(t,e)}))}function xt(t,e){return e?it(t,e):vt(t)}var St=["addListener","removeListener"],Pt=["addEventListener","removeEventListener"],_t=["on","off"];function Et(t,e,n,r){if(p(n)&&(r=n,n=void 0),r)return Et(t,e,n).pipe(gt(r));var o=l(function(t){return p(t.addEventListener)&&p(t.removeEventListener)}(t)?Pt.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return p(t.addListener)&&p(t.removeListener)}(t)?St.map(At(t,e)):function(t){return p(t.on)&&p(t.off)}(t)?_t.map(At(t,e)):[],2),i=o[0],s=o[1];if(!i&&rt(t))return bt((function(t){return Et(t,e,n)}))(xt(t));if(!i)throw new TypeError("Invalid event target");return new J((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return i(e),function(){return s(e)}}))}function At(t,e){return function(n){return function(r){return t[n](e,r)}}}var Tt=Array.isArray,Bt=Object.getPrototypeOf,Ot=Object.prototype,jt=Object.keys;function Rt(t){if(1===t.length){var e=t[0];if(Tt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Bt(r)===Ot){var n=jt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function kt(t){return t[t.length-1]}function Ct(t){return p(kt(t))?t.pop():void 0}function It(t){return K(kt(t))?t.pop():void 0}function Lt(t,e){return"number"==typeof kt(t)?t.pop():e}function Nt(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function qt(t,e,n){return void 0===n&&(n=G),function(r){Ut(e,(function(){for(var o=t.length,i=new Array(o),s=o,a=o,u=function(o){Ut(e,(function(){var u=pt(t[o],e),c=!1;u.subscribe(new et(r,(function(t){i[o]=t,c||(c=!0,a--),a||r.next(n(i.slice()))}),(function(){--s||r.complete()})))}),r)},c=0;c<o;c++)u(c)}),r)}}function Ut(t,e,n){t?n.add(t.schedule(e)):e()}function Ft(t,e,n,r,o){return function(i,s){var a=n,u=e,c=0;i.subscribe(new et(s,(function(e){var n=c++;u=a?t(u,e,n):(a=!0,e),r&&s.next(u)}),o&&function(){a&&s.next(u),s.complete()}))}}function Dt(t,e){return tt(Ft(t,e,arguments.length>=2,!0))}function Mt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ct(t);return tt((function(e,r){for(var o=t.length,i=new Array(o),s=t.map((function(){return!1})),a=!1,u=function(e){yt(t[e]).subscribe(new et(r,(function(t){i[e]=t,a||s[e]||(s[e]=!0,(a=s.every(G))&&(s=null))}),N))},c=0;c<o;c++)u(c);e.subscribe(new et(r,(function(t){if(a){var e=f([t],l(i));r.next(n?n.apply(void 0,f([],l(e))):e)}})))}))}function Yt(t,e){return void 0===e&&(e=G),t=null!=t?t:Ht,tt((function(n,r){var o,i=!0;n.subscribe(new et(r,(function(n){var s=e(n);!i&&t(o,s)||(i=!1,o=s,r.next(n))})))}))}function Ht(t,e){return t===e}function Xt(t){return void 0===t&&(t=1/0),bt(G,t)}var zt=new J((function(t){return t.complete()}));function Gt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=It(t),r=Lt(t,1/0),o=t;return o.length?1===o.length?yt(o[0]):Xt(r)(xt(o,n)):zt}class $t{constructor(){}playerHitSound(){let t=document.createElement("audio");t.src="../assets/paddle_hit.wav",t.style.display="none",t.play()}terrainHitSound(){let t=document.createElement("audio");t.src="../assets/terrain_hit.wav",t.style.display="none",t.play()}scoreSound(){let t=document.createElement("audio");t.src="../assets/score.wav",t.style.display="none",t.play()}}class Jt{constructor(t,e,n,r,o){this.width=t,this.height=e,this.speed=n,this.position=r,this.score=o}getScore(){return this.score}scored(){this.score++}getPositionY(){return this.position.y}setPositionY(t){this.position.y=t}drawPlayer(){e.beginPath(),e.rect(this.position.x,this.position.y,this.width,this.height),e.fill(),e.closePath()}drawScorePlayer(t,n){e.font="24px Arial",e.fillText(this.score.toString(),t,n)}hitPlayer(t,e){return 1==e&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()>r&&t.getBallPositionX()<r+5?(console.log("Hit player1"),(new $t).playerHitSound(),!0):2==e&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()>40&&t.getBallPositionX()<45&&(console.log("hit player 2"),(new $t).playerHitSound(),!0)}movePlayer(t,n,r){let o=t+r*n.deltaTime*this.speed;return Math.max(Math.min(o,e.canvas.height-this.height),0)}}n(669);const Vt=document.getElementById("showLatestMatchLbl");e.fillStyle="white";let Kt={player1:!1,player2:!1,floor:!1,ceiling:!1,wall:!1},Qt={x:2*(Math.random()<.5?1:-1),y:0},Wt={x:t.width/2,y:t.height/2},Zt={x:t.width-40,y:t.height/2},te={x:20,y:t.height/2},ee=new class{constructor(t,e,n,r){this.ballSpeed=t,this.ballRadius=e,this.position=n,this.direction=r}getBallSpeed(){return this.ballSpeed}getBallRadius(){return this.ballRadius}getBallPositionX(){return this.position.x}getBallPositionY(){return this.position.y}setBallPositionX(t){this.position.x=t}setBallPositionY(t){this.position.y=t}resetPosition(){this.position.x=t.width/2,this.position.y=t.height/2}setBallDirectionRandom(){this.direction.x=2*Math.random()*(Math.random()<.5?1:-1),this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}setBallDirectionRandomY(){this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}bounceX(){this.direction.x=-this.direction.x}bounceY(){this.direction.y=-this.direction.y}drawBall(){e.beginPath(),e.arc(this.position.x,this.position.y,this.ballRadius,0,2*Math.PI),e.fill(),e.closePath()}moveBall(t){this.position.x+=this.direction.x*t.deltaTime*this.ballSpeed,this.position.y+=this.direction.y*t.deltaTime*this.ballSpeed}}(150,8,Wt,Qt),ne=new Jt(20,70,350,Zt,0),re=new Jt(20,70,350,te,0);const oe={ball:ee,collisions:Kt,player1:ne,player2:re},ie=(se=15,ae=Z,void 0===se&&(se=0),void 0===ae&&(ae=T),se<0&&(se=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=B);var r=-1;return null!=e&&(K(e)?n=e:r=e),new J((function(e){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-n.now():t;i<0&&(i=0);var s=0;return n.schedule((function(){e.closed||(e.next(s++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(se,se,ae)).pipe(nt((()=>({time:Date.now(),deltaTime:null}))),Dt(((t,e)=>({time:e.time,deltaTime:(e.time-t.time)/1e3}))));var se,ae;const ue=Gt(Et(document,"keydown",(t=>{switch(t.keyCode){case 38:return-1;case 40:return 1;default:return 0}})),Et(document,"keyup",(()=>0))),ce=ie.pipe(Mt(ue),Dt(((t,[e,n])=>ne.movePlayer(t,e,n)),t.width/2),Yt()),le=Gt(Et(document,"keydown",(t=>{switch(t.keyCode){case 87:return-1;case 83:return 1;default:return 0}})),Et(document,"keyup",(()=>0))),fe=ie.pipe(Mt(le),Dt(((t,[e,n])=>re.movePlayer(t,e,n)),t.height/2),Yt());let he=new class{constructor(t,e,n,r){this.player1=t,this.player2=e,this.ball=n,this.collisions=r}drawTitle(){e.textAlign="center",e.font="bold 60px Courier New",e.fillText("P O N G",t.width/2,t.height/2-60)}drawContorls(){e.textAlign="center",e.font="bold 30px Courier New",e.fillText("Press any button to start",t.width/2,t.height/2)}drawGameOver(n){e.clearRect(0,0,t.width,t.height),e.textAlign="center",e.font="20px Arial",e.fillText(n,t.width/2,t.height/2)}updatePlayer1(t){this.player1.setPositionY(t),this.player1.drawPlayer()}updatePlayer2(t){this.player2.setPositionY(t),this.player2.drawPlayer()}updateScorePlayer1(){this.player1.drawScorePlayer(o,20)}updateScorePlayer2(){this.player2.drawScorePlayer(i,20)}gameLogic(e){return this.ball.moveBall(e),this.collisions.player1=this.player1.hitPlayer(this.ball,1),this.collisions.player2=this.player2.hitPlayer(this.ball,2),(this.collisions.player1||this.collisions.player2)&&(this.ball.bounceX(),this.ball.setBallDirectionRandomY()),this.ball.getBallPositionX()>t.width&&(this.player2.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.ball.getBallPositionX()<0&&(this.player1.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.collisions.wall&&((new $t).scoreSound(),this.collisions.wall=!1),this.collisions.ceiling=this.ball.getBallPositionY()<this.ball.getBallRadius(),this.collisions.floor=this.ball.getBallPositionY()>t.height-this.ball.getBallRadius(),(this.collisions.ceiling||this.collisions.floor)&&((new $t).terrainHitSound(),this.ball.bounceY()),{ball:this.ball,collisions:this.collisions,player1:this.player1,player2:this.player2}}}(ne,re,ee,Kt);he.drawTitle(),he.drawContorls();const de=ie.pipe(Mt(ce,fe),Dt((({},[t])=>he.gameLogic(t)),oe)),pe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=It(t),r=Ct(t),o=Rt(t),i=o.args,s=o.keys;if(0===i.length)return pt([],n);var a=new J(qt(i,n,s?function(t){return Nt(s,t)}:G));return r?a.pipe(gt(r)):a}([ie,ce,de,fe]).subscribe((function([n,r,o,i]){e.clearRect(0,0,t.width,t.height),o.ball.drawBall(),he.updatePlayer1(r),he.updatePlayer2(i),he.updateScorePlayer1(),he.updateScorePlayer2(),o.player1.getScore()>4&&(he.drawGameOver("Player 1 wins!\nThe game will reset after 5 sec..."),pe.unsubscribe()),o.player2.getScore()>4&&(he.drawGameOver("Player 2 wins!\nThe game will reset after 5 sec..."),pe.unsubscribe())}));Et(document.getElementById("showLatestMatchBtn"),"click").subscribe((()=>{(async()=>{await fetch("http://localhost:3000/match/?id=0").then((t=>t.json())).then((t=>{Vt.innerHTML=`Player1: ${t[0].player1} \n Player2: ${t[0].player2}`}))})()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL3NyYy9jb25zdGFudHMvY29uc3RhbnRzLnRzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NhdWdodFNjaGVkdWxlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc0FyZ0FycmF5T3JPYmplY3QuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zY2FuSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20uanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbENoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vc3JjL2NvbnN0YW50cy9zb3VuZC50cyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vc3JjL2NvcmUvcGxheWVyLnRzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9zcmMvc2VydmljZXMvbWF0Y2hTZXJ2aWNlLnRzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL3NyYy9jb3JlL2JhbGwudHMiLCJ3ZWJwYWNrOi8vcG9uZ2ZvcnR3by8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly9wb25nZm9ydHdvLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovL3Bvbmdmb3J0d28vLi9zcmMvY29yZS9nYW1lLnRzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1dGlscyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaXNGb3JtRGF0YSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInVybCIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJlIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJ0aGVuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiYmluZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiZGVmYXVsdHMiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJkZWZhdWx0IiwibWVzc2FnZSIsInRoaXMiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsInZhbHVlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiYXJndW1lbnRzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2giLCJsZW5ndGgiLCJzaGlmdCIsImdldFVyaSIsInJlcGxhY2UiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaWQiLCJmbiIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidHJhbnNmb3JtUmVxdWVzdCIsIm1lcmdlIiwiY29tbW9uIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJzbGljZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwiYXhpb3NLZXlzIiwiY29uY2F0Iiwib3RoZXJLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsImNhbGwiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJBcnJheSIsImkiLCJhcHBseSIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJpc1N0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJ0ZXN0IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJ0cmltIiwic3Vic3RyIiwiY2FsbGJhY2siLCJhcnIiLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJvYmoiLCJsIiwiaGFzT3duUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYSIsImIiLCJzdHIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbnZhcyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRDb250ZXh0IiwiUExBWUVSX09ORV9QT1NJVElPTl9YIiwid2lkdGgiLCJQTEFZRVJfT05FX1NDT1JFX1giLCJQTEFZRVJfVFdPX1NDT1JFX1giLCJleHRlbmRTdGF0aWNzIiwiZCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicCIsIl9fZXh0ZW5kcyIsIlN0cmluZyIsIl9fIiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJvcCIsImRvbmUiLCJwb3AiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJfX3JlYWQiLCJyIiwiYXIiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwiaWwiLCJqIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsInEiLCJyZXN1bWUiLCJmdWxmaWxsIiwiY3RvckZ1bmMiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiZXJyb3JzIiwibWFwIiwiZXJyIiwiYXJyUmVtb3ZlIiwiaXRlbSIsImluZGV4Iiwic3BsaWNlIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl90ZWFyZG93bnMiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsImVfMV8xIiwicmV0dXJuIiwiX3RlYXJkb3duc18xIiwiX3RlYXJkb3duc18xXzEiLCJ0ZWFyZG93bl8xIiwiZXhlY1RlYXJkb3duIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJlbXB0eSIsImlzU3Vic2NyaXB0aW9uIiwiQWN0aW9uIiwiX3N1cGVyIiwic2NoZWR1bGVyIiwid29yayIsInNjaGVkdWxlIiwic3RhdGUiLCJkZWxheSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsIl9pIiwiZGVsZWdhdGUiLCJjbGVhckludGVydmFsIiwiaGFuZGxlIiwiQXN5bmNBY3Rpb24iLCJfdGhpcyIsInBlbmRpbmciLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiZmx1c2giLCJfc2NoZWR1bGVyIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsIkFzeW5jU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwiX2FjdGl2ZSIsIl9zY2hlZHVsZWQiLCJhY3Rpb24iLCJhc3luY1NjaGVkdWxlciIsInRpbWVvdXRQcm92aWRlciIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwid3JhcEZvckVycm9ySGFuZGxpbmciLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiaGFuZGxlciIsIl9zeW5jRXJyb3JIYWNrX2lzU3Vic2NyaWJpbmciLCJfX3N5bmNFcnJvciIsIm5vdGlmaWNhdGlvbiIsInN1YnNjcmliZXIiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJ4IiwicGlwZUZyb21BcnJheSIsImlucHV0IiwicmVkdWNlIiwicHJldiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwiaXNPYnNlcnZlciIsIl9kZXByZWNhdGVkU3luY0Vycm9yU3Vic2NyaWJlIiwiX3RyeVN1YnNjcmliZSIsImxvY2FsU3Vic2NyaWJlciIsImRlc3QiLCJzaW5rIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInN1YnNjcmlwdGlvbiIsIm9wZXJhdGlvbnMiLCJ0b1Byb21pc2UiLCJpc1NjaGVkdWxlciIsImFuaW1hdGlvbkZyYW1lUHJvdmlkZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInRpbWVzdGFtcCIsIkFuaW1hdGlvbkZyYW1lQWN0aW9uIiwiYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIiLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlciIsImNvdW50Iiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwicHJvamVjdCIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZSIsInN1YiIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0l0ZXJhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVQcm9taXNlIiwiY2F1Z2h0U2NoZWR1bGUiLCJzY2hlZHVsZUl0ZXJhYmxlIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UiLCJzY2hlZHVsZWQiLCJpbm5lckZyb20iLCJvYnMiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpdGVyYWJsZSIsIml0ZXJhYmxlXzEiLCJpdGVyYWJsZV8xXzEiLCJhcnJheSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiY2F0Y2giLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxUZWFyZG93biIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwibWFwT25lT3JNYW55QXJncyIsImNhbGxPckFwcGx5IiwiaW50ZXJuYWxGcm9tQXJyYXkiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJvYmplY3RQcm90byIsImdldEtleXMiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsImZpcnN0XzEiLCJsYXN0IiwicG9wUmVzdWx0U2VsZWN0b3IiLCJwb3BTY2hlZHVsZXIiLCJwb3BOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPYmplY3QiLCJ2YWx1ZXMiLCJjb21iaW5lTGF0ZXN0SW5pdCIsIm9ic2VydmFibGVzIiwidmFsdWVUcmFuc2Zvcm0iLCJtYXliZVNjaGVkdWxlIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsInNjYW5JbnRlcm5hbHMiLCJhY2N1bXVsYXRvciIsInNlZWQiLCJoYXNTZWVkIiwiZW1pdE9uTmV4dCIsImVtaXRCZWZvcmVDb21wbGV0ZSIsImhhc1N0YXRlIiwic2NhbiIsIndpdGhMYXRlc3RGcm9tIiwiaW5wdXRzIiwibGVuIiwib3RoZXJWYWx1ZXMiLCJoYXNWYWx1ZSIsInJlYWR5IiwiZXZlcnkiLCJkaXN0aW5jdFVudGlsQ2hhbmdlZCIsImNvbXBhcmF0b3IiLCJrZXlTZWxlY3RvciIsImRlZmF1bHRDb21wYXJlIiwicHJldmlvdXNLZXkiLCJmaXJzdCIsImN1cnJlbnRLZXkiLCJtZXJnZUFsbCIsInNvdXJjZXMiLCJTb3VuZCIsInNvdW5kIiwic3JjIiwic3R5bGUiLCJkaXNwbGF5IiwicGxheSIsIlBsYXllciIsImhlaWdodCIsInNwZWVkIiwicG9zaXRpb24iLCJzY29yZSIsImJlZ2luUGF0aCIsInJlY3QiLCJmaWxsIiwiY2xvc2VQYXRoIiwiZm9udCIsImZpbGxUZXh0IiwiYmFsbCIsInBsYXllck5vIiwiZ2V0QmFsbFBvc2l0aW9uWSIsImdldEJhbGxQb3NpdGlvblgiLCJjb25zb2xlIiwibG9nIiwicGxheWVySGl0U291bmQiLCJQTEFZRVJfVFdPX1BPU0lUSU9OX1giLCJwb3NpdGlvblkiLCJ0aWNrZXIiLCJkaXJlY3Rpb25ZIiwiZGVsdGFUaW1lIiwiTWF0aCIsIm1heCIsIm1pbiIsImdldEVsZW1lbnRCeUlkIiwiZmlsbFN0eWxlIiwiY29sbGlzaW9ucyIsInBsYXllcjEiLCJwbGF5ZXIyIiwiZmxvb3IiLCJjZWlsaW5nIiwid2FsbCIsImRpciIsInJhbmRvbSIsInBvcyIsInBvc1AxIiwicG9zUDIiLCJiYWxsU3BlZWQiLCJiYWxsUmFkaXVzIiwiZGlyZWN0aW9uIiwiYXJjIiwiUEkiLCJJTklUSUFMX09CSkVDVFMiLCJ0aWNrZXIkIiwicGVyaW9kIiwiZHVlVGltZSIsImludGVydmFsT3JTY2hlZHVsZXIiLCJpbnRlcnZhbER1cmF0aW9uIiwiZHVlIiwiaXNOYU4iLCJ0aW1lciIsInRpbWUiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJwbGF5ZXIxaW5wdXQkIiwiZXZlbnQiLCJrZXlDb2RlIiwicGxheWVyMVBhZGRsZSQiLCJtb3ZlUGxheWVyIiwicGxheWVyMklucHV0JCIsInBsYXllcjJQYWRkbGUkIiwiZGlyZWN0b24iLCJnYW1lIiwidGV4dEFsaWduIiwidGV4dCIsImNsZWFyUmVjdCIsInBvc1kiLCJzZXRQb3NpdGlvblkiLCJkcmF3UGxheWVyIiwiZHJhd1Njb3JlUGxheWVyIiwibW92ZUJhbGwiLCJoaXRQbGF5ZXIiLCJib3VuY2VYIiwic2V0QmFsbERpcmVjdGlvblJhbmRvbVkiLCJzY29yZWQiLCJyZXNldFBvc2l0aW9uIiwic2NvcmVTb3VuZCIsImdldEJhbGxSYWRpdXMiLCJ0ZXJyYWluSGl0U291bmQiLCJib3VuY2VZIiwiZHJhd1RpdGxlIiwiZHJhd0NvbnRvcmxzIiwib2JqZWN0cyQiLCJnYW1lTG9naWMiLCJjb21iaW5lTGF0ZXN0Iiwib2JqZWN0cyIsImRyYXdCYWxsIiwidXBkYXRlUGxheWVyMSIsInVwZGF0ZVBsYXllcjIiLCJ1cGRhdGVTY29yZVBsYXllcjEiLCJ1cGRhdGVTY29yZVBsYXllcjIiLCJnZXRTY29yZSIsImRyYXdHYW1lT3ZlciIsImFzeW5jIiwiZmV0Y2giLCJqc29uIiwiaW5uZXJIVE1MIiwiZ2V0TWF0Y2giXSwibWFwcGluZ3MiOiI7MkJBQUFBLEVBQU9DLFFBQVUsRUFBakIsTSwyQkNFQSxJQUFJQyxFQUFRLEVBQVEsS0FDaEJDLEVBQVMsRUFBUSxJQUNqQkMsRUFBVSxFQUFRLEtBQ2xCQyxFQUFXLEVBQVEsS0FDbkJDLEVBQWdCLEVBQVEsSUFDeEJDLEVBQWUsRUFBUSxLQUN2QkMsRUFBa0IsRUFBUSxLQUMxQkMsRUFBYyxFQUFRLElBRTFCVCxFQUFPQyxRQUFVLFNBQW9CUyxHQUNuQyxPQUFPLElBQUlDLFNBQVEsU0FBNEJDLEVBQVNDLEdBQ3RELElBQUlDLEVBQWNKLEVBQU9LLEtBQ3JCQyxFQUFpQk4sRUFBT08sUUFFeEJmLEVBQU1nQixXQUFXSixXQUNaRSxFQUFlLGdCQUd4QixJQUFJRyxFQUFVLElBQUlDLGVBR2xCLEdBQUlWLEVBQU9XLEtBQU0sQ0FDZixJQUFJQyxFQUFXWixFQUFPVyxLQUFLQyxVQUFZLEdBQ25DQyxFQUFXYixFQUFPVyxLQUFLRSxTQUFXQyxTQUFTQyxtQkFBbUJmLEVBQU9XLEtBQUtFLFdBQWEsR0FDM0ZQLEVBQWVVLGNBQWdCLFNBQVdDLEtBQUtMLEVBQVcsSUFBTUMsR0FHbEUsSUFBSUssRUFBV3RCLEVBQWNJLEVBQU9tQixRQUFTbkIsRUFBT29CLEtBNEVwRCxHQTNFQVgsRUFB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RCxHQUFhdlksRUFBTXdZLElBRTlDNUgsSUFDUixPQUFPNkUsRUFBaUJ6UCxFQUFPSCxLQUFLNlEsR0FBaUJqQixJQUFtQnpQLEVXMkUvRG9hLENBQWMsQ0FDdkJ6QyxHQUNBYyxHQUNBeUIsR0FDQXRCLEtBQ0R6TixXQXZCSCxVQUFpQitLLEVBQVFTLEVBQVMwRCxFQUFTekQsSUFDdkNwaUIsRUFBUXlrQixVQUFVLEVBQUcsRUFBR3BZLEVBQU9JLE1BQU9KLEVBQU9rVSxRQUM3Q3NGLEVBQVE1RSxLQUFLNkUsV0FDYnhCLEdBQUt5QixjQUFjNUQsR0FDbkJtQyxHQUFLMEIsY0FBYzVELEdBQ25Ca0MsR0FBSzJCLHFCQUNMM0IsR0FBSzRCLHFCQUNETCxFQUFRMUQsUUFBUWdFLFdBUlgsSUFTTDdCLEdBQUs4QixhQUFhLHNEQUNsQi9GLEdBQUszUCxlQUdMbVYsRUFBUXpELFFBQVErRCxXQWJYLElBY0w3QixHQUFLOEIsYUFBYSxzREFDbEIvRixHQUFLM1Asa0JBbkJUOEwsR0FEWWpVLFNBQVN5WixlQUFlLHNCQUNyQixTQUFTckwsV0FBVSxLRDFFZDBQLGlCQUNkQyxNQUFNLHFDQUNQL21CLE1BQU01QixHQUFhQSxFQUFTNG9CLFNBQzVCaG5CLE1BQU16RCxJQUNQNlIsR0FBTTZZLFVBQVksWUFBWTFxQixFQUFLLEdBQUdxbUIsdUJBQXVCcm1CLEVBQUssR0FBR3NtQixjQ3VFckVxRSxPIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gKHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0JykgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJleHBvcnQgY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcclxuZXhwb3J0IGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5leHBvcnQgY29uc3QgUEFERExFX0tFWVNfUExBWUVSX09ORSA9IHtcclxuICAgIHVwOiAzOCxcclxuICAgIGRvd246IDQwLFxyXG59O1xyXG5leHBvcnQgY29uc3QgUEFERExFX0tFWVNfUExBWUVSX1RXTyA9IHtcclxuICAgIHVwOiA4NyxcclxuICAgIGRvd246IDgzLFxyXG59O1xyXG5leHBvcnQgY29uc3QgUExBWUVSX09ORV9QT1NJVElPTl9YID0gY29udGV4dC5jYW52YXMud2lkdGggLSA0MDtcclxuZXhwb3J0IGNvbnN0IFBMQVlFUl9UV09fUE9TSVRJT05fWCA9IDIwO1xyXG5leHBvcnQgY29uc3QgUExBWUVSX09ORV9TQ09SRV9YID0gY2FudmFzLndpZHRoIC8gMiArIDMwO1xyXG5leHBvcnQgY29uc3QgUExBWUVSX1RXT19TQ09SRV9YID0gY2FudmFzLndpZHRoIC8gMiAtIDMwO1xyXG5leHBvcnQgY29uc3QgUExBWUVSX1NDT1JFX1kgPSAyMDtcclxuZXhwb3J0IGNvbnN0IFRJQ0tFUl9JTlRFUlZBTCA9IDE1O1xyXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXHJcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgcmV0dXJuIHRvO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RlYXJkb3ducyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsVGVhcmRvd24gPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxUZWFyZG93bikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVGVhcmRvd24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX3RlYXJkb3ducyA9IHRoaXMuX3RlYXJkb3ducztcbiAgICAgICAgICAgIGlmIChfdGVhcmRvd25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVhcmRvd25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfdGVhcmRvd25zXzEgPSBfX3ZhbHVlcyhfdGVhcmRvd25zKSwgX3RlYXJkb3duc18xXzEgPSBfdGVhcmRvd25zXzEubmV4dCgpOyAhX3RlYXJkb3duc18xXzEuZG9uZTsgX3RlYXJkb3duc18xXzEgPSBfdGVhcmRvd25zXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVhcmRvd25fMSA9IF90ZWFyZG93bnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjVGVhcmRvd24odGVhcmRvd25fMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90ZWFyZG93bnNfMV8xICYmICFfdGVhcmRvd25zXzFfMS5kb25lICYmIChfYiA9IF90ZWFyZG93bnNfMS5yZXR1cm4pKSBfYi5jYWxsKF90ZWFyZG93bnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY1RlYXJkb3duKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fdGVhcmRvd25zID0gKF9hID0gdGhpcy5fdGVhcmRvd25zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF90ZWFyZG93bnMgPSB0aGlzLl90ZWFyZG93bnM7XG4gICAgICAgIF90ZWFyZG93bnMgJiYgYXJyUmVtb3ZlKF90ZWFyZG93bnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNUZWFyZG93bih0ZWFyZG93bikge1xuICAgIGlmIChpc0Z1bmN0aW9uKHRlYXJkb3duKSkge1xuICAgICAgICB0ZWFyZG93bigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGVhcmRvd24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBpbnRlcnZhbFByb3ZpZGVyID0ge1xuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB8fCBzZXRJbnRlcnZhbCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuaWQgfHwgdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaW50ZXJ2YWxQcm92aWRlci5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9ICghIWUgJiYgZSkgfHwgbmV3IEVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKGFjdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGRhdGVUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBEYXRlKS5ub3coKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3RvciA9IHNjaGVkdWxlckFjdGlvbkN0b3I7XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG5leHBvcnQgdmFyIGFzeW5jID0gYXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkgfHwgc2V0VGltZW91dCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcywgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIChuZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dCwgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvciwgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSk7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA9PT0gbnVsbCB8fCBuZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuZXh0LmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgICAgIGVycm9yID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gY29tcGxldGUgPT09IG51bGwgfHwgY29tcGxldGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBsZXRlLmJpbmQoY29udGV4dF8xKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IHtcbiAgICAgICAgICAgIG5leHQ6IG5leHQgPyB3cmFwRm9yRXJyb3JIYW5kbGluZyhuZXh0LCBfdGhpcykgOiBub29wLFxuICAgICAgICAgICAgZXJyb3I6IHdyYXBGb3JFcnJvckhhbmRsaW5nKGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IGRlZmF1bHRFcnJvckhhbmRsZXIsIF90aGlzKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSA/IHdyYXBGb3JFcnJvckhhbmRsaW5nKGNvbXBsZXRlLCBfdGhpcykgOiBub29wLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIHdyYXBGb3JFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGFuZGxlci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLl9fc3luY0Vycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlcHJlY2F0ZWRTeW5jRXJyb3JTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fZGVwcmVjYXRlZFN5bmNFcnJvclN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsb2NhbFN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgICAgICBsb2NhbFN1YnNjcmliZXIuX3N5bmNFcnJvckhhY2tfaXNTdWJzY3JpYmluZyA9IHRydWU7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZCh0aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvY2FsU3Vic2NyaWJlci5fX3N5bmNFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVzdCA9IGxvY2FsU3Vic2NyaWJlcjtcbiAgICAgICAgd2hpbGUgKGRlc3QpIHtcbiAgICAgICAgICAgIGlmICgnX19zeW5jRXJyb3InIGluIGRlc3QpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBkZXN0Ll9fc3luY0Vycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3QgPSBkZXN0LmRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxvY2FsU3Vic2NyaWJlci5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCBzdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbnMubGVuZ3RoID8gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKSA6IHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuc2NoZWR1bGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IHZhciBhbmltYXRpb25GcmFtZVByb3ZpZGVyID0ge1xuICAgIHNjaGVkdWxlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIHZhciBjYW5jZWwgPSBjYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gZGVsZWdhdGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICAgICAgY2FuY2VsID0gZGVsZWdhdGUuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZSA9IHJlcXVlc3QoZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgY2FuY2VsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FsbGJhY2sodGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbmNlbCA9PT0gbnVsbCB8fCBjYW5jZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbmNlbChoYW5kbGUpOyB9KTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHx8IHJlcXVlc3RBbmltYXRpb25GcmFtZSkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB8fCBjYW5jZWxBbmltYXRpb25GcmFtZSkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWVQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZVByb3ZpZGVyIH0gZnJvbSAnLi9hbmltYXRpb25GcmFtZVByb3ZpZGVyJztcbnZhciBBbmltYXRpb25GcmFtZUFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFuaW1hdGlvbkZyYW1lQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkZyYW1lQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLl9zY2hlZHVsZWQgfHwgKHNjaGVkdWxlci5fc2NoZWR1bGVkID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlci5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NoZWR1bGVyLmZsdXNoKHVuZGVmaW5lZCk7IH0pKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkZyYW1lQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKChkZWxheSAhPSBudWxsICYmIGRlbGF5ID4gMCkgfHwgKGRlbGF5ID09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZVByb3ZpZGVyLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZUFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVBY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVBY3Rpb24gfSBmcm9tICcuL0FuaW1hdGlvbkZyYW1lQWN0aW9uJztcbmltcG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH0gZnJvbSAnLi9BbmltYXRpb25GcmFtZVNjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyID0gbmV3IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKEFuaW1hdGlvbkZyYW1lQWN0aW9uKTtcbmV4cG9ydCB2YXIgYW5pbWF0aW9uRnJhbWUgPSBhbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbkZyYW1lLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBBbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgdmFyIGNvdW50ID0gYWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgY291bnQgJiYgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZVNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub25GaW5hbGl6ZSA9IG9uRmluYWxpemU7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gb25OZXh0XG4gICAgICAgICAgICA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX25leHQ7XG4gICAgICAgIF90aGlzLl9lcnJvciA9IG9uRXJyb3JcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT3BlcmF0b3JTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgIWNsb3NlZCAmJiAoKF9hID0gdGhpcy5vbkZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY1ZhbHVlcywgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UsIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tKGlucHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkpO1xufVxuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTsgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGNhdWdodFNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9jYXVnaHRTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgY2F1Z2h0U2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gaXRlcmF0b3IubmV4dCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjYXVnaHRTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGV4ZWN1dGUsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjdXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICAgIHN1YnNjcmliZXIuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdWdodFNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIG9uQmVmb3JlTmV4dCwgZXhwYW5kLCBpbm5lclN1YlNjaGVkdWxlciwgYWRkaXRpb25hbFRlYXJkb3duKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcbiAgICAgICAgICAgIG9uQmVmb3JlTmV4dCA9PT0gbnVsbCB8fCBvbkJlZm9yZU5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmVmb3JlTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICBvdXRlck5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlubmVyQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpbm5lckNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkVmFsdWUgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyU3ViU2NoZWR1bGVyID8gc3Vic2NyaWJlci5hZGQoaW5uZXJTdWJTY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTsgfSkpIDogZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxUZWFyZG93biA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsVGVhcmRvd24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxUZWFyZG93bigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgZnJvbUFycmF5TGlrZSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJuYWxGcm9tQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIDogZnJvbUFycmF5TGlrZShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcbmltcG9ydCB7IGludGVybmFsRnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xudmFyIG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzID0gWydhZGRMaXN0ZW5lcicsICdyZW1vdmVMaXN0ZW5lciddO1xudmFyIGV2ZW50VGFyZ2V0TWV0aG9kcyA9IFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ107XG52YXIganF1ZXJ5TWV0aG9kcyA9IFsnb24nLCAnb2ZmJ107XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICB2YXIgX2EgPSBfX3JlYWQoaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8ganF1ZXJ5TWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW50ZXJuYWxGcm9tQXJyYXkodGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwidmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIGdldEtleXMgPSBPYmplY3Qua2V5cztcbmV4cG9ydCBmdW5jdGlvbiBhcmdzQXJnQXJyYXlPck9iamVjdChhcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBmaXJzdF8xID0gYXJnc1swXTtcbiAgICAgICAgaWYgKGlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGFyZ3M6IGZpcnN0XzEsIGtleXM6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQT0pPKGZpcnN0XzEpKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldEtleXMoZmlyc3RfMSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZpcnN0XzFba2V5XTsgfSksXG4gICAgICAgICAgICAgICAga2V5czoga2V5cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYXJnczogYXJncywga2V5czogbnVsbCB9O1xufVxuZnVuY3Rpb24gaXNQT0pPKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gb2JqZWN0UHJvdG87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzQXJnQXJyYXlPck9iamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAoKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldKSwgcmVzdWx0KTsgfSwge30pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFyZ3NBcmdBcnJheU9yT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC9hcmdzQXJnQXJyYXlPck9iamVjdCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcbmltcG9ydCB7IHBvcFJlc3VsdFNlbGVjdG9yLCBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgY3JlYXRlT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC9jcmVhdGVPYmplY3QnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IHBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICB2YXIgX2EgPSBhcmdzQXJnQXJyYXlPck9iamVjdChhcmdzKSwgb2JzZXJ2YWJsZXMgPSBfYS5hcmdzLCBrZXlzID0gX2Eua2V5cztcbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmcm9tKFtdLCBzY2hlZHVsZXIpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gbmV3IE9ic2VydmFibGUoY29tYmluZUxhdGVzdEluaXQob2JzZXJ2YWJsZXMsIHNjaGVkdWxlciwga2V5c1xuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWVzKSB7IHJldHVybiBjcmVhdGVPYmplY3Qoa2V5cywgdmFsdWVzKTsgfVxuICAgICAgICA6XG4gICAgICAgICAgICBpZGVudGl0eSkpO1xuICAgIHJldHVybiByZXN1bHRTZWxlY3RvciA/IHJlc3VsdC5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKSA6IHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCB2YWx1ZVRyYW5zZm9ybSkge1xuICAgIGlmICh2YWx1ZVRyYW5zZm9ybSA9PT0gdm9pZCAwKSB7IHZhbHVlVHJhbnNmb3JtID0gaWRlbnRpdHk7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gbGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHJlbWFpbmluZ0ZpcnN0VmFsdWVzID0gbGVuZ3RoO1xuICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIG1heWJlU2NoZWR1bGUoc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmcm9tKG9ic2VydmFibGVzW2ldLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRmlyc3RWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmlyc3RWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ZpcnN0VmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0ZpcnN0VmFsdWVzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbWFpbmluZ0ZpcnN0VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlVHJhbnNmb3JtKHZhbHVlcy5zbGljZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9LCBzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1heWJlU2NoZWR1bGUoc2NoZWR1bGVyLCBleGVjdXRlLCBzdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGV4ZWN1dGUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4ZWN1dGUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcCIsImltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkLCBlbWl0T25OZXh0LCBlbWl0QmVmb3JlQ29tcGxldGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzU3RhdGUgPSBoYXNTZWVkO1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGluZGV4Kys7XG4gICAgICAgICAgICBzdGF0ZSA9IGhhc1N0YXRlXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcihzdGF0ZSwgdmFsdWUsIGkpXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAoKGhhc1N0YXRlID0gdHJ1ZSksIHZhbHVlKTtcbiAgICAgICAgICAgIGVtaXRPbk5leHQgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgfSwgZW1pdEJlZm9yZUNvbXBsZXRlICYmXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGhhc1N0YXRlICYmIHN1YnNjcmliZXIubmV4dChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NhbkludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IHNjYW5JbnRlcm5hbHMgfSBmcm9tICcuL3NjYW5JbnRlcm5hbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIHRydWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBwb3BSZXN1bHRTZWxlY3RvciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGlucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGlucHV0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IHBvcFJlc3VsdFNlbGVjdG9yKGlucHV0cyk7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGVuID0gaW5wdXRzLmxlbmd0aDtcbiAgICAgICAgdmFyIG90aGVyVmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGlucHV0cy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICAgICAgICB2YXIgcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgaW5uZXJGcm9tKGlucHV0c1tpXSkuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlYWR5ICYmICFoYXNWYWx1ZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZVtpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChyZWFkeSA9IGhhc1ZhbHVlLmV2ZXJ5KGlkZW50aXR5KSkgJiYgKGhhc1ZhbHVlID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbm9vcCkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChyZWFkeSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBfX3NwcmVhZEFycmF5KFt2YWx1ZV0sIF9fcmVhZChvdGhlclZhbHVlcykpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0ID8gcHJvamVjdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh2YWx1ZXMpKSkgOiB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQoY29tcGFyYXRvciwga2V5U2VsZWN0b3IpIHtcbiAgICBpZiAoa2V5U2VsZWN0b3IgPT09IHZvaWQgMCkgeyBrZXlTZWxlY3RvciA9IGlkZW50aXR5OyB9XG4gICAgY29tcGFyYXRvciA9IGNvbXBhcmF0b3IgIT09IG51bGwgJiYgY29tcGFyYXRvciAhPT0gdm9pZCAwID8gY29tcGFyYXRvciA6IGRlZmF1bHRDb21wYXJlO1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzS2V5O1xuICAgICAgICB2YXIgZmlyc3QgPSB0cnVlO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCB8fCAhY29tcGFyYXRvcihwcmV2aW91c0tleSwgY3VycmVudEtleSkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzS2V5ID0gY3VycmVudEtleTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFsbChjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoaWRlbnRpdHksIGNvbmN1cnJlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VBbGwuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IHZhciBFTVBUWSA9IG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pO1xuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5KHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIDogRU1QVFk7XG59XG5mdW5jdGlvbiBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcCIsImltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlQWxsJztcbmltcG9ydCB7IGludGVybmFsRnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9mcm9tJztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgeyBwb3BOdW1iZXIsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBwb3BOdW1iZXIoYXJncywgSW5maW5pdHkpO1xuICAgIHZhciBzb3VyY2VzID0gYXJncztcbiAgICByZXR1cm4gIXNvdXJjZXMubGVuZ3RoXG4gICAgICAgID9cbiAgICAgICAgICAgIEVNUFRZXG4gICAgICAgIDogc291cmNlcy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICBpbm5lckZyb20oc291cmNlc1swXSlcbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBtZXJnZUFsbChjb25jdXJyZW50KShpbnRlcm5hbEZyb21BcnJheShzb3VyY2VzLCBzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcCIsImV4cG9ydCBjbGFzcyBTb3VuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gICAgcGxheWVySGl0U291bmQoKSB7XHJcbiAgICAgICAgbGV0IHNvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xyXG4gICAgICAgIHNvdW5kLnNyYyA9IFwiLi4vYXNzZXRzL3BhZGRsZV9oaXQud2F2XCI7XHJcbiAgICAgICAgc291bmQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNvdW5kLnBsYXkoKTtcclxuICAgIH1cclxuICAgIHRlcnJhaW5IaXRTb3VuZCgpIHtcclxuICAgICAgICBsZXQgc291bmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XHJcbiAgICAgICAgc291bmQuc3JjID0gXCIuLi9hc3NldHMvdGVycmFpbl9oaXQud2F2XCI7XHJcbiAgICAgICAgc291bmQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNvdW5kLnBsYXkoKTtcclxuICAgIH1cclxuICAgIHNjb3JlU291bmQoKSB7XHJcbiAgICAgICAgbGV0IHNvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xyXG4gICAgICAgIHNvdW5kLnNyYyA9IFwiLi4vYXNzZXRzL3Njb3JlLndhdlwiO1xyXG4gICAgICAgIHNvdW5kLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBzb3VuZC5wbGF5KCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29udGV4dCwgUExBWUVSX09ORV9QT1NJVElPTl9YLCBQTEFZRVJfVFdPX1BPU0lUSU9OX1ggfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBTb3VuZCB9IGZyb20gXCIuLi9jb25zdGFudHMvc291bmRcIjtcclxuZXhwb3J0IGNsYXNzIFBsYXllciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBzcGVlZCwgcG9zaXRpb24sIHNjb3JlKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5zY29yZSA9IHNjb3JlO1xyXG4gICAgfVxyXG4gICAgZ2V0U2NvcmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcmU7XHJcbiAgICB9XHJcbiAgICBzY29yZWQoKSB7XHJcbiAgICAgICAgdGhpcy5zY29yZSsrO1xyXG4gICAgfVxyXG4gICAgZ2V0UG9zaXRpb25ZKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBzZXRQb3NpdGlvblkoeSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IHk7XHJcbiAgICB9XHJcbiAgICBkcmF3UGxheWVyKCkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5yZWN0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxuICAgIGRyYXdTY29yZVBsYXllcih4LCB5KSB7XHJcbiAgICAgICAgY29udGV4dC5mb250ID0gXCIyNHB4IEFyaWFsXCI7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dCh0aGlzLnNjb3JlLnRvU3RyaW5nKCksIHgsIHkpO1xyXG4gICAgfVxyXG4gICAgLy8xLT4gcGxheWVyIDEgfHwgMi0+cGxheWVyIDJcclxuICAgIGhpdFBsYXllcihiYWxsLCBwbGF5ZXJObykge1xyXG4gICAgICAgIGlmIChwbGF5ZXJObyA9PSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChiYWxsLmdldEJhbGxQb3NpdGlvblkoKSA+IHRoaXMucG9zaXRpb24ueSAmJlxyXG4gICAgICAgICAgICAgICAgYmFsbC5nZXRCYWxsUG9zaXRpb25ZKCkgPCB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLmhlaWdodCAmJlxyXG4gICAgICAgICAgICAgICAgYmFsbC5nZXRCYWxsUG9zaXRpb25YKCkgPiBQTEFZRVJfT05FX1BPU0lUSU9OX1ggJiYgYmFsbC5nZXRCYWxsUG9zaXRpb25YKCkgPCBQTEFZRVJfT05FX1BPU0lUSU9OX1ggKyA1XHJcbiAgICAgICAgICAgIC8vIGJhbGwuZ2V0QmFsbFBvc2l0aW9uWCgpID4gY29udGV4dC5jYW52YXMud2lkdGggLSB0aGlzLndpZHRoICogMiAvL292byBuaWplIGRvYnJvIHJlc2VuamVcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkhpdCBwbGF5ZXIxXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNvdW5kID0gbmV3IFNvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICBzb3VuZC5wbGF5ZXJIaXRTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBsYXllck5vID09IDIpIHtcclxuICAgICAgICAgICAgaWYgKGJhbGwuZ2V0QmFsbFBvc2l0aW9uWSgpID4gdGhpcy5wb3NpdGlvbi55ICYmXHJcbiAgICAgICAgICAgICAgICBiYWxsLmdldEJhbGxQb3NpdGlvblkoKSA8IHRoaXMucG9zaXRpb24ueSArIHRoaXMuaGVpZ2h0ICYmXHJcbiAgICAgICAgICAgICAgICBiYWxsLmdldEJhbGxQb3NpdGlvblgoKSA+IFBMQVlFUl9UV09fUE9TSVRJT05fWCArIDIwICYmIGJhbGwuZ2V0QmFsbFBvc2l0aW9uWCgpIDwgUExBWUVSX1RXT19QT1NJVElPTl9YICsgMjUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGl0IHBsYXllciAyXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNvdW5kID0gbmV3IFNvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICBzb3VuZC5wbGF5ZXJIaXRTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbW92ZVBsYXllcihwb3NpdGlvblksIHRpY2tlciwgZGlyZWN0aW9uWSkge1xyXG4gICAgICAgIGxldCBuZXh0ID0gcG9zaXRpb25ZICsgZGlyZWN0aW9uWSAqIHRpY2tlci5kZWx0YVRpbWUgKiB0aGlzLnNwZWVkO1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihuZXh0LCBjb250ZXh0LmNhbnZhcy5oZWlnaHQgLSB0aGlzLmhlaWdodCksIDApO1xyXG4gICAgfVxyXG59XHJcbiIsImNvbnN0IGF4aW9zID0gcmVxdWlyZShcImF4aW9zXCIpO1xyXG5jb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvd0xhdGVzdE1hdGNoTGJsXCIpO1xyXG5leHBvcnQgY29uc3QgZ2V0TWF0Y2ggPSBhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9tYXRjaC8/aWQ9MFwiKVxyXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gYFBsYXllcjE6ICR7ZGF0YVswXS5wbGF5ZXIxfSBcXG4gUGxheWVyMjogJHtkYXRhWzBdLnBsYXllcjJ9YDtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnQgY29uc3Qgc2V0TWF0Y2ggPSAoc2NvcmUxLCBzY29yZTIpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF4aW9zLnB1dChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9tYXRjaC8wXCIsIHtcclxuICAgICAgICAgICAgcGxheWVyMTogc2NvcmUxLFxyXG4gICAgICAgICAgICBwbGF5ZXIyOiBzY29yZTJcclxuICAgICAgICB9KTtcclxuICAgIH0sIDUwMDApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBCYWxsIH0gZnJvbSBcIi4vY29yZS9iYWxsXCI7XHJcbmltcG9ydCB7IGNhbnZhcywgY29udGV4dCwgUEFERExFX0tFWVNfUExBWUVSX09ORSwgUEFERExFX0tFWVNfUExBWUVSX1RXTywgVElDS0VSX0lOVEVSVkFMLCB9IGZyb20gXCIuL2NvbnN0YW50cy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIsIGNvbWJpbmVMYXRlc3QsIGZyb21FdmVudCwgaW50ZXJ2YWwsIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc2Nhbiwgd2l0aExhdGVzdEZyb20sIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4vY29yZS9wbGF5ZXJcIjtcclxuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuL2NvcmUvZ2FtZVwiO1xyXG5pbXBvcnQgeyBnZXRNYXRjaCB9IGZyb20gXCIuL3NlcnZpY2VzL21hdGNoU2VydmljZVwiO1xyXG5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxubGV0IGNvbGxpc2lvbnMgPSB7XHJcbiAgICBwbGF5ZXIxOiBmYWxzZSxcclxuICAgIHBsYXllcjI6IGZhbHNlLFxyXG4gICAgZmxvb3I6IGZhbHNlLFxyXG4gICAgY2VpbGluZzogZmFsc2UsXHJcbiAgICB3YWxsOiBmYWxzZSxcclxufTtcclxubGV0IGRpciA9IHtcclxuICAgIHg6IChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKSAqIDIsXHJcbiAgICB5OiAwXHJcbn07XHJcbmxldCBwb3MgPSB7XHJcbiAgICB4OiBjYW52YXMud2lkdGggLyAyLFxyXG4gICAgeTogY2FudmFzLmhlaWdodCAvIDIsXHJcbn07XHJcbmxldCBwb3NQMSA9IHtcclxuICAgIHg6IGNhbnZhcy53aWR0aCAtIDQwLFxyXG4gICAgeTogY2FudmFzLmhlaWdodCAvIDIsXHJcbn07XHJcbmxldCBwb3NQMiA9IHtcclxuICAgIHg6IDIwLFxyXG4gICAgeTogY2FudmFzLmhlaWdodCAvIDIsXHJcbn07XHJcbmxldCBiYWxsID0gbmV3IEJhbGwoMTUwLCA4LCBwb3MsIGRpcik7XHJcbmxldCBwbGF5ZXIxID0gbmV3IFBsYXllcigyMCwgNzAsIDM1MCwgcG9zUDEsIDApO1xyXG5sZXQgcGxheWVyMiA9IG5ldyBQbGF5ZXIoMjAsIDcwLCAzNTAsIHBvc1AyLCAwKTtcclxuY29uc3QgSU5JVElBTF9PQkpFQ1RTID0ge1xyXG4gICAgYmFsbCxcclxuICAgIGNvbGxpc2lvbnMsXHJcbiAgICBwbGF5ZXIxLFxyXG4gICAgcGxheWVyMixcclxufTtcclxuY29uc3QgdGlja2VyJCA9IGludGVydmFsKFRJQ0tFUl9JTlRFUlZBTCwgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIpLnBpcGUobWFwKCgpID0+ICh7XHJcbiAgICB0aW1lOiBEYXRlLm5vdygpLFxyXG4gICAgZGVsdGFUaW1lOiBudWxsLFxyXG59KSksIHNjYW4oKHByZXZpb3VzLCBjdXJyZW50KSA9PiAoe1xyXG4gICAgdGltZTogY3VycmVudC50aW1lLFxyXG4gICAgZGVsdGFUaW1lOiAoY3VycmVudC50aW1lIC0gcHJldmlvdXMudGltZSkgLyAxMDAwLFxyXG59KSkpO1xyXG5jb25zdCBwbGF5ZXIxaW5wdXQkID0gbWVyZ2UoZnJvbUV2ZW50KGRvY3VtZW50LCBcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIFBBRERMRV9LRVlTX1BMQVlFUl9PTkUudXA6XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICBjYXNlIFBBRERMRV9LRVlTX1BMQVlFUl9PTkUuZG93bjpcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn0pLCBmcm9tRXZlbnQoZG9jdW1lbnQsIFwia2V5dXBcIiwgKCkgPT4gMCkpO1xyXG5jb25zdCBwbGF5ZXIxUGFkZGxlJCA9IHRpY2tlciQucGlwZSh3aXRoTGF0ZXN0RnJvbShwbGF5ZXIxaW5wdXQkKSwgc2NhbigocG9zaXRpb24sIFt0aWNrZXIsIGRpcmVjdGlvbl0pID0+IHBsYXllcjEubW92ZVBsYXllcihwb3NpdGlvbiwgdGlja2VyLCBkaXJlY3Rpb24pLCBjYW52YXMud2lkdGggLyAyKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XHJcbmNvbnN0IHBsYXllcjJJbnB1dCQgPSBtZXJnZShmcm9tRXZlbnQoZG9jdW1lbnQsIFwia2V5ZG93blwiLCAoZXZlbnQpID0+IHtcclxuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgUEFERExFX0tFWVNfUExBWUVSX1RXTy51cDpcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGNhc2UgUEFERExFX0tFWVNfUExBWUVSX1RXTy5kb3duOlxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufSksIGZyb21FdmVudChkb2N1bWVudCwgXCJrZXl1cFwiLCAoKSA9PiAwKSk7XHJcbmNvbnN0IHBsYXllcjJQYWRkbGUkID0gdGlja2VyJC5waXBlKHdpdGhMYXRlc3RGcm9tKHBsYXllcjJJbnB1dCQpLCBzY2FuKChwb3NpdGlvbiwgW3RpY2tlciwgZGlyZWN0b25dKSA9PiBwbGF5ZXIyLm1vdmVQbGF5ZXIocG9zaXRpb24sIHRpY2tlciwgZGlyZWN0b24pLCBjYW52YXMuaGVpZ2h0IC8gMiksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xyXG5sZXQgZ2FtZSA9IG5ldyBHYW1lKHBsYXllcjEsIHBsYXllcjIsIGJhbGwsIGNvbGxpc2lvbnMpO1xyXG5nYW1lLmRyYXdUaXRsZSgpO1xyXG5nYW1lLmRyYXdDb250b3JscygpO1xyXG5jb25zdCBvYmplY3RzJCA9IHRpY2tlciQucGlwZSh3aXRoTGF0ZXN0RnJvbShwbGF5ZXIxUGFkZGxlJCwgcGxheWVyMlBhZGRsZSQpLCBzY2FuKCh7fSwgW3RpY2tlcl0pID0+IGdhbWUuZ2FtZUxvZ2ljKHRpY2tlciksIElOSVRJQUxfT0JKRUNUUykpO1xyXG5mdW5jdGlvbiBzaG93TGF0ZXN0TWF0Y2goKSB7XHJcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3dMYXRlc3RNYXRjaEJ0blwiKTtcclxuICAgIGZyb21FdmVudChidG4sIFwiY2xpY2tcIikuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICBnZXRNYXRjaCgpO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgZ29hbCA9IDQ7IC8vaWdyYSBzZSBkbyA1XHJcbmZ1bmN0aW9uIHVwZGF0ZShbdGlja2VyLCBwbGF5ZXIxLCBvYmplY3RzLCBwbGF5ZXIyXSkge1xyXG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIG9iamVjdHMuYmFsbC5kcmF3QmFsbCgpO1xyXG4gICAgZ2FtZS51cGRhdGVQbGF5ZXIxKHBsYXllcjEpO1xyXG4gICAgZ2FtZS51cGRhdGVQbGF5ZXIyKHBsYXllcjIpO1xyXG4gICAgZ2FtZS51cGRhdGVTY29yZVBsYXllcjEoKTtcclxuICAgIGdhbWUudXBkYXRlU2NvcmVQbGF5ZXIyKCk7XHJcbiAgICBpZiAob2JqZWN0cy5wbGF5ZXIxLmdldFNjb3JlKCkgPiBnb2FsKSB7XHJcbiAgICAgICAgZ2FtZS5kcmF3R2FtZU92ZXIoXCJQbGF5ZXIgMSB3aW5zIVxcblRoZSBnYW1lIHdpbGwgcmVzZXQgYWZ0ZXIgNSBzZWMuLi5cIik7XHJcbiAgICAgICAgcGxheS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIC8vIHNldE1hdGNoKG9iamVjdHMucGxheWVyMS5nZXRTY29yZSgpLCBvYmplY3RzLnBsYXllcjIuZ2V0U2NvcmUoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0cy5wbGF5ZXIyLmdldFNjb3JlKCkgPiBnb2FsKSB7XHJcbiAgICAgICAgZ2FtZS5kcmF3R2FtZU92ZXIoXCJQbGF5ZXIgMiB3aW5zIVxcblRoZSBnYW1lIHdpbGwgcmVzZXQgYWZ0ZXIgNSBzZWMuLi5cIik7XHJcbiAgICAgICAgcGxheS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIC8vIHNldE1hdGNoKG9iamVjdHMucGxheWVyMS5nZXRTY29yZSgpLCBvYmplY3RzLnBsYXllcjIuZ2V0U2NvcmUoKSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgcGxheSA9IGNvbWJpbmVMYXRlc3QoW1xyXG4gICAgdGlja2VyJCxcclxuICAgIHBsYXllcjFQYWRkbGUkLFxyXG4gICAgb2JqZWN0cyQsXHJcbiAgICBwbGF5ZXIyUGFkZGxlJCxcclxuXSkuc3Vic2NyaWJlKHVwZGF0ZSk7XHJcbnNob3dMYXRlc3RNYXRjaCgpO1xyXG4iLCJpbXBvcnQgeyBjYW52YXMsIGNvbnRleHQgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5leHBvcnQgY2xhc3MgQmFsbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihiYWxsU3BlZWQsIGJhbGxSYWRpdXMsIHBvc2l0aW9uLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmJhbGxTcGVlZCA9IGJhbGxTcGVlZDtcclxuICAgICAgICB0aGlzLmJhbGxSYWRpdXMgPSBiYWxsUmFkaXVzO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgIH1cclxuICAgIGdldEJhbGxTcGVlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYWxsU3BlZWQ7XHJcbiAgICB9XHJcbiAgICBnZXRCYWxsUmFkaXVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhbGxSYWRpdXM7XHJcbiAgICB9XHJcbiAgICBnZXRCYWxsUG9zaXRpb25YKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICB9XHJcbiAgICBnZXRCYWxsUG9zaXRpb25ZKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBzZXRCYWxsUG9zaXRpb25YKHgpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgfVxyXG4gICAgc2V0QmFsbFBvc2l0aW9uWSh5KSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0geTtcclxuICAgIH1cclxuICAgIHJlc2V0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gY2FudmFzLndpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSBjYW52YXMuaGVpZ2h0IC8gMjtcclxuICAgIH1cclxuICAgIHNldEJhbGxEaXJlY3Rpb25SYW5kb20oKSB7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24ueCA9IChNYXRoLnJhbmRvbSgpKSAqIDIgKiAoTWF0aC5yYW5kb20oKSA8IDAuNSA/IDEgOiAtMSk7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24ueSA9IChNYXRoLnJhbmRvbSgpKSAqIDIgKiAoTWF0aC5yYW5kb20oKSA8IDAuNSA/IDEgOiAtMSk7XHJcbiAgICB9XHJcbiAgICBzZXRCYWxsRGlyZWN0aW9uUmFuZG9tWSgpIHtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi55ID0gKE1hdGgucmFuZG9tKCkpICogMiAqIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKTtcclxuICAgIH1cclxuICAgIGJvdW5jZVgoKSB7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24ueCA9IC10aGlzLmRpcmVjdGlvbi54O1xyXG4gICAgfVxyXG4gICAgYm91bmNlWSgpIHtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi55ID0gLXRoaXMuZGlyZWN0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBkcmF3QmFsbCgpIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLmJhbGxSYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG4gICAgbW92ZUJhbGwodGlja2VyKSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ICs9IHRoaXMuZGlyZWN0aW9uLnggKiB0aWNrZXIuZGVsdGFUaW1lICogdGhpcy5iYWxsU3BlZWQ7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMuZGlyZWN0aW9uLnkgKiB0aWNrZXIuZGVsdGFUaW1lICogdGhpcy5iYWxsU3BlZWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL3RpbWVyJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkgeyBwZXJpb2QgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgaWYgKHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVyKHBlcmlvZCwgcGVyaW9kLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXN5bmMgYXMgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGlzVmFsaWREYXRlIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGR1ZVRpbWUsIGludGVydmFsT3JTY2hlZHVsZXIsIHNjaGVkdWxlcikge1xuICAgIGlmIChkdWVUaW1lID09PSB2b2lkIDApIHsgZHVlVGltZSA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICB2YXIgaW50ZXJ2YWxEdXJhdGlvbiA9IC0xO1xuICAgIGlmIChpbnRlcnZhbE9yU2NoZWR1bGVyICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyKGludGVydmFsT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc1ZhbGlkRGF0ZShkdWVUaW1lKSA/ICtkdWVUaW1lIC0gc2NoZWR1bGVyLm5vdygpIDogZHVlVGltZTtcbiAgICAgICAgaWYgKGR1ZSA8IDApIHtcbiAgICAgICAgICAgIGR1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG4gPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobisrKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSBpbnRlcnZhbER1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCBpbnRlcnZhbER1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGR1ZSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwIiwiaW1wb3J0IHsgY2FudmFzLCBjb250ZXh0LCBQTEFZRVJfT05FX1NDT1JFX1gsIFBMQVlFUl9TQ09SRV9ZLCBQTEFZRVJfVFdPX1NDT1JFX1gsIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgU291bmQgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3NvdW5kXCI7XHJcbmV4cG9ydCBjbGFzcyBHYW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKHBsYXllcjEsIHBsYXllcjIsIGJhbGwsIGNvbGxpc2lvbnMpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjEgPSBwbGF5ZXIxO1xyXG4gICAgICAgIHRoaXMucGxheWVyMiA9IHBsYXllcjI7XHJcbiAgICAgICAgdGhpcy5iYWxsID0gYmFsbDtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbnMgPSBjb2xsaXNpb25zO1xyXG4gICAgfVxyXG4gICAgZHJhd1RpdGxlKCkge1xyXG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICBjb250ZXh0LmZvbnQgPSBcImJvbGQgNjBweCBDb3VyaWVyIE5ld1wiO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXCJQIE8gTiBHXCIsIGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyIC0gNjApO1xyXG4gICAgfVxyXG4gICAgZHJhd0NvbnRvcmxzKCkge1xyXG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICBjb250ZXh0LmZvbnQgPSBcImJvbGQgMzBweCBDb3VyaWVyIE5ld1wiO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoXCJQcmVzcyBhbnkgYnV0dG9uIHRvIHN0YXJ0XCIsIGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgIH1cclxuICAgIGRyYXdHYW1lT3Zlcih0ZXh0KSB7XHJcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgY29udGV4dC5mb250ID0gXCIyMHB4IEFyaWFsXCI7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LCBjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVQbGF5ZXIxKHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjEuc2V0UG9zaXRpb25ZKHBvc1kpO1xyXG4gICAgICAgIHRoaXMucGxheWVyMS5kcmF3UGxheWVyKCk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVQbGF5ZXIyKHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjIuc2V0UG9zaXRpb25ZKHBvc1kpO1xyXG4gICAgICAgIHRoaXMucGxheWVyMi5kcmF3UGxheWVyKCk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVTY29yZVBsYXllcjEoKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIxLmRyYXdTY29yZVBsYXllcihQTEFZRVJfT05FX1NDT1JFX1gsIFBMQVlFUl9TQ09SRV9ZKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVNjb3JlUGxheWVyMigpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjIuZHJhd1Njb3JlUGxheWVyKFBMQVlFUl9UV09fU0NPUkVfWCwgUExBWUVSX1NDT1JFX1kpO1xyXG4gICAgfVxyXG4gICAgZ2FtZUxvZ2ljKHRpY2tlcikge1xyXG4gICAgICAgIHRoaXMuYmFsbC5tb3ZlQmFsbCh0aWNrZXIpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5wbGF5ZXIxID0gdGhpcy5wbGF5ZXIxLmhpdFBsYXllcih0aGlzLmJhbGwsIDEpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5wbGF5ZXIyID0gdGhpcy5wbGF5ZXIyLmhpdFBsYXllcih0aGlzLmJhbGwsIDIpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbnMucGxheWVyMSB8fCB0aGlzLmNvbGxpc2lvbnMucGxheWVyMikge1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuYm91bmNlWCgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuc2V0QmFsbERpcmVjdGlvblJhbmRvbVkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYmFsbC5nZXRCYWxsUG9zaXRpb25YKCkgPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIyLnNjb3JlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbnMud2FsbCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYmFsbC5yZXNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJhbGwuZ2V0QmFsbFBvc2l0aW9uWCgpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllcjEuc2NvcmVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9ucy53YWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5iYWxsLnJlc2V0UG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29sbGlzaW9ucy53YWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBzb3VuZCA9IG5ldyBTb3VuZCgpO1xyXG4gICAgICAgICAgICBzb3VuZC5zY29yZVNvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9ucy53YWxsID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9ucy5jZWlsaW5nID1cclxuICAgICAgICAgICAgdGhpcy5iYWxsLmdldEJhbGxQb3NpdGlvblkoKSA8IHRoaXMuYmFsbC5nZXRCYWxsUmFkaXVzKCk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25zLmZsb29yID1cclxuICAgICAgICAgICAgdGhpcy5iYWxsLmdldEJhbGxQb3NpdGlvblkoKSA+IGNhbnZhcy5oZWlnaHQgLSB0aGlzLmJhbGwuZ2V0QmFsbFJhZGl1cygpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbnMuY2VpbGluZyB8fCB0aGlzLmNvbGxpc2lvbnMuZmxvb3IpIHtcclxuICAgICAgICAgICAgbGV0IHNvdW5kID0gbmV3IFNvdW5kKCk7XHJcbiAgICAgICAgICAgIHNvdW5kLnRlcnJhaW5IaXRTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGwuYm91bmNlWSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiYWxsOiB0aGlzLmJhbGwsXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbnM6IHRoaXMuY29sbGlzaW9ucyxcclxuICAgICAgICAgICAgcGxheWVyMTogdGhpcy5wbGF5ZXIxLFxyXG4gICAgICAgICAgICBwbGF5ZXIyOiB0aGlzLnBsYXllcjIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9