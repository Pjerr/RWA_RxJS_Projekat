/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={669:(t,e,n)=>{t.exports=n(609)},448:(t,e,n)=>{"use strict";var r=n(867),o=n(26),i=n(372),s=n(327),a=n(97),u=n(109),c=n(985),l=n(61);t.exports=function(t){return new Promise((function(e,n){var f=t.data,h=t.headers;r.isFormData(f)&&delete h["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",y=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";h.Authorization="Basic "+btoa(p+":"+y)}var v=a(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),s(v,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,i={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:t,request:d};o(e,n,i),d=null}},d.onabort=function(){d&&(n(l("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(l("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(l(e,t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var m=(t.withCredentials||c(v))&&t.xsrfCookieName?i.read(t.xsrfCookieName):void 0;m&&(h[t.xsrfHeaderName]=m)}if("setRequestHeader"in d&&r.forEach(h,(function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete h[e]:d.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),n(t),d=null)})),f||(f=null),d.send(f)}))}},609:(t,e,n)=>{"use strict";var r=n(867),o=n(849),i=n(321),s=n(185);function a(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var u=a(n(655));u.Axios=i,u.create=function(t){return a(s(u.defaults,t))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(t){return Promise.all(t)},u.spread=n(713),u.isAxiosError=n(268),t.exports=u,t.exports.default=u},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var r=n(263);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var r=n(867),o=n(327),i=n(782),s=n(572),a=n(185);function u(t){this.defaults=t,this.interceptors={request:new i,response:new i}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[s,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},u.prototype.getUri=function(t){return t=a(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,n){return this.request(a(n||{},{method:t,url:e,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,n,r){return this.request(a(r||{},{method:t,url:e,data:n}))}})),t.exports=u},782:(t,e,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},97:(t,e,n)=>{"use strict";var r=n(793),o=n(303);t.exports=function(t,e){return t&&!r(e)?o(t,e):e}},61:(t,e,n)=>{"use strict";var r=n(481);t.exports=function(t,e,n,o,i){var s=new Error(t);return r(s,e,n,o,i)}},572:(t,e,n)=>{"use strict";var r=n(867),o=n(527),i=n(502),s=n(655);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||s.adapter)(t).then((function(e){return a(t),e.data=o(e.data,e.headers,t.transformResponse),e}),(function(e){return i(e)||(a(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){e=e||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function u(t,e){return r.isPlainObject(t)&&r.isPlainObject(e)?r.merge(t,e):r.isPlainObject(e)?r.merge({},e):r.isArray(e)?e.slice():e}function c(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=u(void 0,t[o])):n[o]=u(t[o],e[o])}r.forEach(o,(function(t){r.isUndefined(e[t])||(n[t]=u(void 0,e[t]))})),r.forEach(i,c),r.forEach(s,(function(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=u(void 0,t[o])):n[o]=u(void 0,e[o])})),r.forEach(a,(function(r){r in e?n[r]=u(t[r],e[r]):r in t&&(n[r]=u(void 0,t[r]))}));var l=o.concat(i).concat(s).concat(a),f=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===l.indexOf(t)}));return r.forEach(f,c),n}},26:(t,e,n)=>{"use strict";var r=n(61);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},527:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},655:(t,e,n)=>{"use strict";var r=n(867),o=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,u={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=n(448)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(t){u.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){u.headers[t]=r.merge(i)})),t.exports=u},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var r=n(867);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var s=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),s.push(o(e)+"="+o(t))})))})),i=s.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,s){var a=[];a.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},109:(t,e,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,s={};return t?(r.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(s[e]&&o.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function s(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function u(t){if("[object Object]"!==o.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function c(t){return"[object Function]"===o.call(t)}function l(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:u,isUndefined:s,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:c,isStream:function(t){return a(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){u(e[r])&&u(n)?e[r]=t(e[r],n):u(n)?e[r]=t({},n):i(n)?e[r]=n.slice():e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,(function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";const t=document.querySelector("canvas"),e=t.getContext("2d"),r=(e.canvas.width,t.width/2+30),o=t.width/2-30;var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function a(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function u(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function l(t,e){for(var n=0,r=e.length,o=t.length;n<r;n++,o++)t[o]=e[n];return t}function f(t){return this instanceof f?(this.v=t,this):new f(t)}function h(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=o[t](e)).value instanceof f?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(t){l(i[0][3],t)}var n}function u(t){a("next",t)}function c(t){a("throw",t)}function l(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}function d(t){return"function"==typeof t}Object.create,Object.create;var p,y=((p=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),p.prototype.constructor=p,p);function v(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var m=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=u(i),a=s.next();!a.done;a=s.next())a.value.remove(this)}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}else i.remove(this);var f=this.initialTeardown;if(d(f))try{f()}catch(t){o=t instanceof y?t.errors:[t]}var h=this._teardowns;if(h){this._teardowns=null;try{for(var p=u(h),v=p.next();!v.done;v=p.next()){var m=v.value;try{w(m)}catch(t){o=null!=o?o:[],t instanceof y?o=l(l([],c(o)),c(t.errors)):o.push(t)}}}catch(t){n={error:t}}finally{try{v&&!v.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}}if(o)throw new y(o)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)w(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&v(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&v(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function b(t){return t instanceof m||t&&"closed"in t&&d(t.remove)&&d(t.add)&&d(t.unsubscribe)}function w(t){d(t)?t():t.unsubscribe()}m.EMPTY;var g=function(t){function e(e,n){return t.call(this)||this}return s(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(m),x={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=x.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,l([],c(t)))},clearInterval:function(t){var e=x.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},S=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return s(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),x.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;x.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,v(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(g),P={now:function(){return(P.delegate||Date).now()},delegate:void 0},_=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=P.now,t}(),E=function(t){function e(e,n){void 0===n&&(n=_.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return s(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(_),A=new E(S),T=A,j=null,O=null,B=void 0,k=!1,R=!1,C={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=C.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,l([],c(t)))},clearTimeout:function(t){var e=C.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function I(t){C.setTimeout((function(){if(!j)throw t;j(t)}))}function N(){}var L=q("C",void 0,void 0);function q(t,e,n){return{kind:t,value:e,error:n}}var U=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,b(e)&&e.add(n)):n.destination=H,n}return s(e,t),e.create=function(t,e,n){return new F(t,e,n)},e.prototype.next=function(t){this.isStopped?Y(function(t){return q("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?Y(q("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?Y(L,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(m),F=function(t){function e(e,n,r){var o,i=t.call(this)||this;if(d(e))o=e;else if(e){var s;o=e.next,n=e.error,r=e.complete,i&&R?(s=Object.create(e)).unsubscribe=function(){return i.unsubscribe()}:s=e,o=null==o?void 0:o.bind(s),n=null==n?void 0:n.bind(s),r=null==r?void 0:r.bind(s)}return i.destination={next:o?M(o,i):N,error:M(null!=n?n:D,i),complete:r?M(r,i):N},i}return s(e,t),e}(U);function M(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,l([],c(n)))}catch(t){if(k){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else I(t)}}}function D(t){throw t}function Y(t,e){var n=O;n&&C.setTimeout((function(){return n(t,e)}))}var H={closed:!0,next:N,error:D,complete:N},X="function"==typeof Symbol&&Symbol.observable||"@@observable";function z(t){return t}function G(t){return 0===t.length?z:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var $=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=(r=t)&&r instanceof U||function(t){return t&&d(t.next)&&d(t.error)&&d(t.complete)}(r)&&b(r)?t:new F(t,e,n);if(k)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,s=this.source;o.add(i?i.call(o,s):s?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=J(e))((function(e,r){var o;o=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==o||o.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[X]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?G(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=J(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function J(t){var e;return null!==(e=null!=t?t:B)&&void 0!==e?e:Promise}function V(t){return t&&d(t.schedule)}var K={schedule:function(t){var e=requestAnimationFrame,n=cancelAnimationFrame,r=K.delegate;r&&(e=r.requestAnimationFrame,n=r.cancelAnimationFrame);var o=e((function(e){n=void 0,t(e)}));return new m((function(){return null==n?void 0:n(o)}))},requestAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=K.delegate;return((null==n?void 0:n.requestAnimationFrame)||requestAnimationFrame).apply(void 0,l([],c(t)))},cancelAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=K.delegate;return((null==n?void 0:n.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,l([],c(t)))},delegate:void 0},Q=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return s(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e._scheduled||(e._scheduled=K.requestAnimationFrame((function(){return e.flush(void 0)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(K.cancelAnimationFrame(n),e._scheduled=void 0)},e}(S),W=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.flush=function(t){this._active=!0,this._scheduled=void 0;var e,n=this.actions,r=-1;t=t||n.shift();var o=n.length;do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this._active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(E))(Q);function Z(t){return function(e){if(function(t){return d(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var tt=function(t){function e(e,n,r,o,i){var s=t.call(this,e)||this;return s.onFinalize=i,s._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return s(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(U);function et(t,e){return Z((function(n,r){var o=0;n.subscribe(new tt(r,(function(n){r.next(t.call(e,n,o++))})))}))}var nt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function rt(t){return d(null==t?void 0:t.then)}function ot(t,e){return new $((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var it="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function st(t,e){if(!t)throw new Error("Iterable cannot be null");return new $((function(n){var r=new m;return r.add(e.schedule((function(){var o=t[Symbol.asyncIterator]();r.add(e.schedule((function(){var t=this;o.next().then((function(e){e.done?n.complete():(n.next(e.value),t.schedule())}))})))}))),r}))}function at(t){return d(t[X])}function ut(t){return d(null==t?void 0:t[it])}function ct(t){return Symbol.asyncIterator&&d(null==t?void 0:t[Symbol.asyncIterator])}function lt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function ft(t){return h(this,arguments,(function(){var e,n,r;return a(this,(function(o){switch(o.label){case 0:e=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,f(e.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,f(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,f(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ht(t){return d(null==t?void 0:t.getReader)}function dt(t,e){return e?function(t,e){if(null!=t){if(at(t))return function(t,e){return new $((function(n){var r=new m;return r.add(e.schedule((function(){var o=t[X]();r.add(o.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(nt(t))return ot(t,e);if(rt(t))return function(t,e){return new $((function(n){return e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){n.next(t),n.add(e.schedule((function(){return n.complete()})))})))}),(function(t){n.add(e.schedule((function(){return n.error(t)})))}))}))}))}(t,e);if(ct(t))return st(t,e);if(ut(t))return function(t,e){return new $((function(n){var r;return n.add(e.schedule((function(){r=t[it](),function(t,e,n,r){void 0===r&&(r=0);var o=e.schedule((function(){try{n.call(this)}catch(e){t.error(e)}}),r);t.add(o)}(n,e,(function(){var t=r.next(),e=t.value;t.done?n.complete():(n.next(e),this.schedule())}))}))),function(){return d(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ht(t))return function(t,e){return st(ft(t),e)}(t,e)}throw lt(t)}(t,e):pt(t)}function pt(t){if(t instanceof $)return t;if(null!=t){if(at(t))return r=t,new $((function(t){var e=r[X]();if(d(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(nt(t))return yt(t);if(rt(t))return n=t,new $((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,I)}));if(ct(t))return vt(t);if(ut(t))return e=t,new $((function(t){var n,r;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var s=i.value;if(t.next(s),t.closed)return}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(ht(t))return vt(ft(t))}var e,n,r;throw lt(t)}function yt(t){return new $((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function vt(t){return new $((function(e){(function(t,e){var n,r,o,i,s,c,l,f;return s=this,c=void 0,f=function(){var s,c;return a(this,(function(a){switch(a.label){case 0:a.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=u(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),a.label=1;case 1:return[4,n.next()];case 2:if((r=a.sent()).done)return[3,4];if(s=r.value,e.next(s),e.closed)return[2];a.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=a.sent(),o={error:c},[3,11];case 6:return a.trys.push([6,,9,10]),r&&!r.done&&(i=n.return)?[4,i.call(n)]:[3,8];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(s,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function mt(t,e,n){return void 0===n&&(n=1/0),d(e)?mt((function(n,r){return et((function(t,o){return e(n,t,r,o)}))(pt(t(n,r)))}),n):("number"==typeof e&&(n=e),Z((function(e,r){return function(t,e,n,r,o,i,s,a){var u=[],c=0,l=0,f=!1,h=function(){!f||u.length||c||e.complete()},d=function(t){return c<r?p(t):u.push(t)},p=function(t){c++;var o=!1;pt(n(t,l++)).subscribe(new tt(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{c--;for(;u.length&&c<r;)t=void 0,t=u.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(new tt(e,d,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var bt=Array.isArray;function wt(t){return et((function(e){return function(t,e){return bt(e)?t.apply(void 0,l([],c(e))):t(e)}(t,e)}))}function gt(t,e){return e?ot(t,e):yt(t)}var xt=["addListener","removeListener"],St=["addEventListener","removeEventListener"],Pt=["on","off"];function _t(t,e,n,r){if(d(n)&&(r=n,n=void 0),r)return _t(t,e,n).pipe(wt(r));var o=c(function(t){return d(t.addEventListener)&&d(t.removeEventListener)}(t)?St.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return d(t.addListener)&&d(t.removeListener)}(t)?xt.map(Et(t,e)):function(t){return d(t.on)&&d(t.off)}(t)?Pt.map(Et(t,e)):[],2),i=o[0],s=o[1];if(!i&&nt(t))return mt((function(t){return _t(t,e,n)}))(gt(t));if(!i)throw new TypeError("Invalid event target");return new $((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return i(e),function(){return s(e)}}))}function Et(t,e){return function(n){return function(r){return t[n](e,r)}}}var At=Array.isArray,Tt=Object.getPrototypeOf,jt=Object.prototype,Ot=Object.keys;function Bt(t){if(1===t.length){var e=t[0];if(At(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Tt(r)===jt){var n=Ot(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function kt(t){return t[t.length-1]}function Rt(t){return d(kt(t))?t.pop():void 0}function Ct(t){return V(kt(t))?t.pop():void 0}function It(t,e){return"number"==typeof kt(t)?t.pop():e}function Nt(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function Lt(t,e,n){return void 0===n&&(n=z),function(r){qt(e,(function(){for(var o=t.length,i=new Array(o),s=o,a=o,u=function(o){qt(e,(function(){var u=dt(t[o],e),c=!1;u.subscribe(new tt(r,(function(t){i[o]=t,c||(c=!0,a--),a||r.next(n(i.slice()))}),(function(){--s||r.complete()})))}),r)},c=0;c<o;c++)u(c)}),r)}}function qt(t,e,n){t?n.add(t.schedule(e)):e()}function Ut(t,e,n,r,o){return function(i,s){var a=n,u=e,c=0;i.subscribe(new tt(s,(function(e){var n=c++;u=a?t(u,e,n):(a=!0,e),r&&s.next(u)}),o&&function(){a&&s.next(u),s.complete()}))}}function Ft(t,e){return Z(Ut(t,e,arguments.length>=2,!0))}function Mt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Rt(t);return Z((function(e,r){for(var o=t.length,i=new Array(o),s=t.map((function(){return!1})),a=!1,u=function(e){pt(t[e]).subscribe(new tt(r,(function(t){i[e]=t,a||s[e]||(s[e]=!0,(a=s.every(z))&&(s=null))}),N))},f=0;f<o;f++)u(f);e.subscribe(new tt(r,(function(t){if(a){var e=l([t],c(i));r.next(n?n.apply(void 0,l([],c(e))):e)}})))}))}function Dt(t,e){return void 0===e&&(e=z),t=null!=t?t:Yt,Z((function(n,r){var o,i=!0;n.subscribe(new tt(r,(function(n){var s=e(n);!i&&t(o,s)||(i=!1,o=s,r.next(n))})))}))}function Yt(t,e){return t===e}function Ht(t){return void 0===t&&(t=1/0),mt(z,t)}var Xt=new $((function(t){return t.complete()}));function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ct(t),r=It(t,1/0),o=t;return o.length?1===o.length?pt(o[0]):Ht(r)(gt(o,n)):Xt}class Gt{constructor(){}playerHitSound(){let t=document.createElement("audio");t.src="../assets/paddle_hit.wav",t.style.display="none",t.play()}terrainHitSound(){let t=document.createElement("audio");t.src="../assets/terrain_hit.wav",t.style.display="none",t.play()}scoreSound(){let t=document.createElement("audio");t.src="../assets/score.wav",t.style.display="none",t.play()}}class $t{constructor(t,e,n,r,o){this.width=t,this.height=e,this.speed=n,this.position=r,this.score=o}getScore(){return this.score}scored(){this.score++}getPositionY(){return this.position.y}setPositionY(t){this.position.y=t}drawPlayer(){e.beginPath(),e.rect(this.position.x,this.position.y,this.width,this.height),e.fill(),e.closePath()}drawScorePlayer(t,n){e.font="24px Arial",e.fillText(this.score.toString(),t,n)}hitPlayer(t,n){return 1==n&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()>e.canvas.width-2*this.width?(console.log("Hit player1"),(new Gt).playerHitSound(),!0):2==n&&t.getBallPositionY()>this.position.y&&t.getBallPositionY()<this.position.y+this.height&&t.getBallPositionX()<2*this.width&&(console.log("hit player 2"),(new Gt).playerHitSound(),!0)}movePlayer(t,n,r){let o=t+r*n.deltaTime*this.speed;return Math.max(Math.min(o,e.canvas.height-this.height),0)}}const Jt=n(669),Vt=document.getElementById("partijaLbl"),Kt=(t,e)=>{setTimeout((()=>{Jt.put("http://localhost:3000/match/0",{player1:t,player2:e})}),5e3)};e.fillStyle="white";let Qt={player1:!1,player2:!1,floor:!1,ceiling:!1,wall:!1},Wt={x:2.4*Math.random()*(Math.random()<.5?1:-1),y:2.4*Math.random()*(Math.random()<.5?1:-1)},Zt={x:t.width/2,y:t.height/2},te={x:t.width-40,y:t.height/2},ee={x:20,y:t.height/2},ne=new class{constructor(t,e,n,r){this.ballSpeed=t,this.ballRadius=e,this.position=n,this.direction=r}getBallSpeed(){return this.ballSpeed}getBallRadius(){return this.ballRadius}getBallPositionX(){return this.position.x}getBallPositionY(){return this.position.y}setBallPositionX(t){this.position.x=t}setBallPositionY(t){this.position.y=t}resetPosition(){this.position.x=t.width/2,this.position.y=t.height/2}setBallDirectionRandom(){this.direction.x=2*Math.random()*(Math.random()<.5?1:-1),this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}setBallDirectionRandomY(){this.direction.y=2*Math.random()*(Math.random()<.5?1:-1)}bounceX(){this.direction.x=-this.direction.x}bounceY(){this.direction.y=-this.direction.y}drawBall(){e.beginPath(),e.arc(this.position.x,this.position.y,this.ballRadius,0,2*Math.PI),e.fill(),e.closePath()}moveBall(t){this.position.x+=this.direction.x*t.deltaTime*this.ballSpeed,this.position.y+=this.direction.y*t.deltaTime*this.ballSpeed}}(150,8,Zt,Wt),re=new $t(20,70,350,te,0),oe=new $t(20,70,350,ee,0);const ie={ball:ne,collisions:Qt,player1:re,player2:oe},se=(ae=17,ue=W,void 0===ae&&(ae=0),void 0===ue&&(ue=A),ae<0&&(ae=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=T);var r=-1;return null!=e&&(V(e)?n=e:r=e),new $((function(e){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-n.now():t;i<0&&(i=0);var s=0;return n.schedule((function(){e.closed||(e.next(s++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(ae,ae,ue)).pipe(et((()=>({time:Date.now(),deltaTime:null}))),Ft(((t,e)=>({time:e.time,deltaTime:(e.time-t.time)/1e3}))));var ae,ue;const ce=zt(_t(document,"keydown",(t=>{switch(t.keyCode){case 38:return-1;case 40:return 1;default:return 0}})),_t(document,"keyup",(()=>0))),le=se.pipe(Mt(ce),Ft(((t,[e,n])=>re.movePlayer(t,e,n)),t.width/2),Dt()),fe=zt(_t(document,"keydown",(t=>{switch(t.keyCode){case 87:return-1;case 83:return 1;default:return 0}})),_t(document,"keyup",(()=>0))),he=se.pipe(Mt(fe),Ft(((t,[e,n])=>oe.movePlayer(t,e,n)),t.height/2),Dt());let de=new class{constructor(t,e,n,r){this.player1=t,this.player2=e,this.ball=n,this.collisions=r}drawTitle(){e.textAlign="center",e.font="bold 60px Courier New",e.fillText("P O N G",t.width/2,t.height/2-60)}drawContorls(){e.textAlign="center",e.font="bold 30px Courier New",e.fillText("Press any button to start",t.width/2,t.height/2)}drawGameOver(n){e.clearRect(0,0,t.width,t.height),e.textAlign="center",e.font="20px Arial",e.fillText(n,t.width/2,t.height/2)}updatePlayer1(t){this.player1.setPositionY(t),this.player1.drawPlayer()}updatePlayer2(t){this.player2.setPositionY(t),this.player2.drawPlayer()}updateScorePlayer1(){this.player1.drawScorePlayer(r,20)}updateScorePlayer2(){this.player2.drawScorePlayer(o,20)}calculateObjects(e){return this.ball.moveBall(e),this.collisions.player1=this.player1.hitPlayer(this.ball,1),this.collisions.player2=this.player2.hitPlayer(this.ball,2),(this.collisions.player1||this.collisions.player2)&&(this.ball.bounceX(),this.ball.setBallDirectionRandomY()),this.ball.getBallPositionX()>t.width&&(this.player2.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.ball.getBallPositionX()<0&&(this.player1.scored(),this.collisions.wall=!0,this.ball.resetPosition()),this.collisions.wall&&((new Gt).scoreSound(),this.collisions.wall=!1),this.collisions.ceiling=this.ball.getBallPositionY()<this.ball.getBallRadius(),this.collisions.floor=this.ball.getBallPositionY()>t.height-this.ball.getBallRadius(),(this.collisions.ceiling||this.collisions.floor)&&((new Gt).terrainHitSound(),this.ball.bounceY()),{ball:this.ball,collisions:this.collisions,player1:this.player1,player2:this.player2}}}(re,oe,ne,Qt);de.drawTitle(),de.drawContorls();const pe=se.pipe(Mt(le,he),Ft((({},[t])=>de.calculateObjects(t)),ie)),ye=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ct(t),r=Rt(t),o=Bt(t),i=o.args,s=o.keys;if(0===i.length)return dt([],n);var a=new $(Lt(i,n,s?function(t){return Nt(s,t)}:z));return r?a.pipe(wt(r)):a}([se,le,pe,he]).subscribe((function([n,r,o,i]){e.clearRect(0,0,t.width,t.height),o.ball.drawBall(),de.updatePlayer1(r),de.updatePlayer2(i),de.updateScorePlayer1(),de.updateScorePlayer2(),o.player1.getScore()>4&&(de.drawGameOver("Player 1 wins!\nThe game will reset after 5 sec..."),ye.unsubscribe(),Kt(o.player1.getScore(),o.player2.getScore())),o.player2.getScore()>4&&(de.drawGameOver("Player 2 wins!\nThe game will reset after 5 sec..."),ye.unsubscribe(),Kt(o.player1.getScore(),o.player2.getScore()))}));document.getElementById("partijaLbl"),_t(document.getElementById("pokaziPartijuBtn"),"click").subscribe((()=>{(async()=>{await fetch("http://localhost:3000/match/?id=0").then((t=>t.json())).then((t=>{Vt.innerHTML=`Player1: ${t[0].player1} \n Player2: ${t[0].player2}`}))})()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,